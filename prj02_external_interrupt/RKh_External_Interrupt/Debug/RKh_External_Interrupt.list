
RKh_External_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dd0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000f58  08000f58  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000f58  08000f58  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000f58  08000f58  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f58  08000f58  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f58  08000f58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f5c  08000f5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000f60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   00002c45  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000ba2  00000000  00000000  00022cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000003a0  00000000  00000000  00023860  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000029d  00000000  00000000  00023c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a41e  00000000  00000000  00023e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002ff8  00000000  00000000  0003e2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00093e1a  00000000  00000000  000412b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000da4  00000000  00000000  000d50d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  000d5e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000f40 	.word	0x08000f40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000f40 	.word	0x08000f40

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	2b00      	cmp	r3, #0
 800023c:	db0b      	blt.n	8000256 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f003 021f 	and.w	r2, r3, #31
 8000244:	4907      	ldr	r1, [pc, #28]	; (8000264 <__NVIC_EnableIRQ+0x38>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	095b      	lsrs	r3, r3, #5
 800024c:	2001      	movs	r0, #1
 800024e:	fa00 f202 	lsl.w	r2, r0, r2
 8000252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000260:	4770      	bx	lr
 8000262:	bf00      	nop
 8000264:	e000e100 	.word	0xe000e100

08000268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	6039      	str	r1, [r7, #0]
 8000272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000278:	2b00      	cmp	r3, #0
 800027a:	db0a      	blt.n	8000292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	b2da      	uxtb	r2, r3
 8000280:	490c      	ldr	r1, [pc, #48]	; (80002b4 <__NVIC_SetPriority+0x4c>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	0112      	lsls	r2, r2, #4
 8000288:	b2d2      	uxtb	r2, r2
 800028a:	440b      	add	r3, r1
 800028c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000290:	e00a      	b.n	80002a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000292:	683b      	ldr	r3, [r7, #0]
 8000294:	b2da      	uxtb	r2, r3
 8000296:	4908      	ldr	r1, [pc, #32]	; (80002b8 <__NVIC_SetPriority+0x50>)
 8000298:	79fb      	ldrb	r3, [r7, #7]
 800029a:	f003 030f 	and.w	r3, r3, #15
 800029e:	3b04      	subs	r3, #4
 80002a0:	0112      	lsls	r2, r2, #4
 80002a2:	b2d2      	uxtb	r2, r2
 80002a4:	440b      	add	r3, r1
 80002a6:	761a      	strb	r2, [r3, #24]
}
 80002a8:	bf00      	nop
 80002aa:	370c      	adds	r7, #12
 80002ac:	46bd      	mov	sp, r7
 80002ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b2:	4770      	bx	lr
 80002b4:	e000e100 	.word	0xe000e100
 80002b8:	e000ed00 	.word	0xe000ed00

080002bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002bc:	b480      	push	{r7}
 80002be:	b089      	sub	sp, #36	; 0x24
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	60f8      	str	r0, [r7, #12]
 80002c4:	60b9      	str	r1, [r7, #8]
 80002c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	f003 0307 	and.w	r3, r3, #7
 80002ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002d0:	69fb      	ldr	r3, [r7, #28]
 80002d2:	f1c3 0307 	rsb	r3, r3, #7
 80002d6:	2b04      	cmp	r3, #4
 80002d8:	bf28      	it	cs
 80002da:	2304      	movcs	r3, #4
 80002dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	3304      	adds	r3, #4
 80002e2:	2b06      	cmp	r3, #6
 80002e4:	d902      	bls.n	80002ec <NVIC_EncodePriority+0x30>
 80002e6:	69fb      	ldr	r3, [r7, #28]
 80002e8:	3b03      	subs	r3, #3
 80002ea:	e000      	b.n	80002ee <NVIC_EncodePriority+0x32>
 80002ec:	2300      	movs	r3, #0
 80002ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002f0:	f04f 32ff 	mov.w	r2, #4294967295
 80002f4:	69bb      	ldr	r3, [r7, #24]
 80002f6:	fa02 f303 	lsl.w	r3, r2, r3
 80002fa:	43da      	mvns	r2, r3
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	401a      	ands	r2, r3
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000304:	f04f 31ff 	mov.w	r1, #4294967295
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	fa01 f303 	lsl.w	r3, r1, r3
 800030e:	43d9      	mvns	r1, r3
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000314:	4313      	orrs	r3, r2
         );
}
 8000316:	4618      	mov	r0, r3
 8000318:	3724      	adds	r7, #36	; 0x24
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
	...

08000324 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <LL_RCC_HSI_Enable+0x1c>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <LL_RCC_HSI_Enable+0x1c>)
 800032e:	f043 0301 	orr.w	r3, r3, #1
 8000332:	6013      	str	r3, [r2, #0]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40023800 	.word	0x40023800

08000344 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8000348:	4b06      	ldr	r3, [pc, #24]	; (8000364 <LL_RCC_HSI_IsReady+0x20>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	f003 0302 	and.w	r3, r3, #2
 8000350:	2b02      	cmp	r3, #2
 8000352:	bf0c      	ite	eq
 8000354:	2301      	moveq	r3, #1
 8000356:	2300      	movne	r3, #0
 8000358:	b2db      	uxtb	r3, r3
}
 800035a:	4618      	mov	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40023800 	.word	0x40023800

08000368 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	00db      	lsls	r3, r3, #3
 800037c:	4904      	ldr	r1, [pc, #16]	; (8000390 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800037e:	4313      	orrs	r3, r2
 8000380:	600b      	str	r3, [r1, #0]
}
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800

08000394 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <LL_RCC_SetSysClkSource+0x24>)
 800039e:	689b      	ldr	r3, [r3, #8]
 80003a0:	f023 0203 	bic.w	r2, r3, #3
 80003a4:	4904      	ldr	r1, [pc, #16]	; (80003b8 <LL_RCC_SetSysClkSource+0x24>)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4313      	orrs	r3, r2
 80003aa:	608b      	str	r3, [r1, #8]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40023800 	.word	0x40023800

080003bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003c0:	4b04      	ldr	r3, [pc, #16]	; (80003d4 <LL_RCC_GetSysClkSource+0x18>)
 80003c2:	689b      	ldr	r3, [r3, #8]
 80003c4:	f003 030c 	and.w	r3, r3, #12
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40023800 	.word	0x40023800

080003d8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003e0:	4b06      	ldr	r3, [pc, #24]	; (80003fc <LL_RCC_SetAHBPrescaler+0x24>)
 80003e2:	689b      	ldr	r3, [r3, #8]
 80003e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003e8:	4904      	ldr	r1, [pc, #16]	; (80003fc <LL_RCC_SetAHBPrescaler+0x24>)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4313      	orrs	r3, r2
 80003ee:	608b      	str	r3, [r1, #8]
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr
 80003fc:	40023800 	.word	0x40023800

08000400 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000400:	b480      	push	{r7}
 8000402:	b083      	sub	sp, #12
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <LL_RCC_SetAPB1Prescaler+0x24>)
 800040a:	689b      	ldr	r3, [r3, #8]
 800040c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000410:	4904      	ldr	r1, [pc, #16]	; (8000424 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4313      	orrs	r3, r2
 8000416:	608b      	str	r3, [r1, #8]
}
 8000418:	bf00      	nop
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	40023800 	.word	0x40023800

08000428 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000430:	4b06      	ldr	r3, [pc, #24]	; (800044c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000432:	689b      	ldr	r3, [r3, #8]
 8000434:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000438:	4904      	ldr	r1, [pc, #16]	; (800044c <LL_RCC_SetAPB2Prescaler+0x24>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	4313      	orrs	r3, r2
 800043e:	608b      	str	r3, [r1, #8]
}
 8000440:	bf00      	nop
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	40023800 	.word	0x40023800

08000450 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000458:	4b08      	ldr	r3, [pc, #32]	; (800047c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800045a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800045c:	4907      	ldr	r1, [pc, #28]	; (800047c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	4313      	orrs	r3, r2
 8000462:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000464:	4b05      	ldr	r3, [pc, #20]	; (800047c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4013      	ands	r3, r2
 800046c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800046e:	68fb      	ldr	r3, [r7, #12]
}
 8000470:	bf00      	nop
 8000472:	3714      	adds	r7, #20
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr
 800047c:	40023800 	.word	0x40023800

08000480 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000480:	b480      	push	{r7}
 8000482:	b085      	sub	sp, #20
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000488:	4b08      	ldr	r3, [pc, #32]	; (80004ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800048a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800048c:	4907      	ldr	r1, [pc, #28]	; (80004ac <LL_APB1_GRP1_EnableClock+0x2c>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000494:	4b05      	ldr	r3, [pc, #20]	; (80004ac <LL_APB1_GRP1_EnableClock+0x2c>)
 8000496:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4013      	ands	r3, r2
 800049c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800049e:	68fb      	ldr	r3, [r7, #12]
}
 80004a0:	bf00      	nop
 80004a2:	3714      	adds	r7, #20
 80004a4:	46bd      	mov	sp, r7
 80004a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004aa:	4770      	bx	lr
 80004ac:	40023800 	.word	0x40023800

080004b0 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80004b8:	4b08      	ldr	r3, [pc, #32]	; (80004dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004bc:	4907      	ldr	r1, [pc, #28]	; (80004dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4313      	orrs	r3, r2
 80004c2:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80004c4:	4b05      	ldr	r3, [pc, #20]	; (80004dc <LL_APB2_GRP1_EnableClock+0x2c>)
 80004c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	4013      	ands	r3, r2
 80004cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ce:	68fb      	ldr	r3, [r7, #12]
}
 80004d0:	bf00      	nop
 80004d2:	3714      	adds	r7, #20
 80004d4:	46bd      	mov	sp, r7
 80004d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004da:	4770      	bx	lr
 80004dc:	40023800 	.word	0x40023800

080004e0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80004ea:	4a13      	ldr	r2, [pc, #76]	; (8000538 <LL_SYSCFG_SetEXTISource+0x58>)
 80004ec:	683b      	ldr	r3, [r7, #0]
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	3302      	adds	r3, #2
 80004f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80004f6:	683b      	ldr	r3, [r7, #0]
 80004f8:	0c1b      	lsrs	r3, r3, #16
 80004fa:	43db      	mvns	r3, r3
 80004fc:	ea02 0103 	and.w	r1, r2, r3
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	0c1b      	lsrs	r3, r3, #16
 8000504:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	fa93 f3a3 	rbit	r3, r3
 800050c:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800050e:	68bb      	ldr	r3, [r7, #8]
 8000510:	fab3 f383 	clz	r3, r3
 8000514:	b2db      	uxtb	r3, r3
 8000516:	461a      	mov	r2, r3
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	fa03 f202 	lsl.w	r2, r3, r2
 800051e:	4806      	ldr	r0, [pc, #24]	; (8000538 <LL_SYSCFG_SetEXTISource+0x58>)
 8000520:	683b      	ldr	r3, [r7, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	430a      	orrs	r2, r1
 8000526:	3302      	adds	r3, #2
 8000528:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800052c:	bf00      	nop
 800052e:	3714      	adds	r7, #20
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr
 8000538:	40013800 	.word	0x40013800

0800053c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <LL_FLASH_SetLatency+0x24>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f023 0207 	bic.w	r2, r3, #7
 800054c:	4904      	ldr	r1, [pc, #16]	; (8000560 <LL_FLASH_SetLatency+0x24>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4313      	orrs	r3, r2
 8000552:	600b      	str	r3, [r1, #0]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr
 8000560:	40023c00 	.word	0x40023c00

08000564 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000564:	b480      	push	{r7}
 8000566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000568:	4b04      	ldr	r3, [pc, #16]	; (800057c <LL_FLASH_GetLatency+0x18>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f003 0307 	and.w	r3, r3, #7
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40023c00 	.word	0x40023c00

08000580 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000590:	4904      	ldr	r1, [pc, #16]	; (80005a4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	600b      	str	r3, [r1, #0]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40007000 	.word	0x40007000

080005a8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b089      	sub	sp, #36	; 0x24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	fa93 f3a3 	rbit	r3, r3
 80005c2:	613b      	str	r3, [r7, #16]
  return result;
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	fab3 f383 	clz	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	005b      	lsls	r3, r3, #1
 80005ce:	2103      	movs	r1, #3
 80005d0:	fa01 f303 	lsl.w	r3, r1, r3
 80005d4:	43db      	mvns	r3, r3
 80005d6:	401a      	ands	r2, r3
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	fa93 f3a3 	rbit	r3, r3
 80005e2:	61bb      	str	r3, [r7, #24]
  return result;
 80005e4:	69bb      	ldr	r3, [r7, #24]
 80005e6:	fab3 f383 	clz	r3, r3
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	005b      	lsls	r3, r3, #1
 80005ee:	6879      	ldr	r1, [r7, #4]
 80005f0:	fa01 f303 	lsl.w	r3, r1, r3
 80005f4:	431a      	orrs	r2, r3
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	601a      	str	r2, [r3, #0]
}
 80005fa:	bf00      	nop
 80005fc:	3724      	adds	r7, #36	; 0x24
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr

08000606 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000606:	b480      	push	{r7}
 8000608:	b089      	sub	sp, #36	; 0x24
 800060a:	af00      	add	r7, sp, #0
 800060c:	60f8      	str	r0, [r7, #12]
 800060e:	60b9      	str	r1, [r7, #8]
 8000610:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	68da      	ldr	r2, [r3, #12]
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	fa93 f3a3 	rbit	r3, r3
 8000620:	613b      	str	r3, [r7, #16]
  return result;
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	fab3 f383 	clz	r3, r3
 8000628:	b2db      	uxtb	r3, r3
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	2103      	movs	r1, #3
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	401a      	ands	r2, r3
 8000636:	68bb      	ldr	r3, [r7, #8]
 8000638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800063a:	69fb      	ldr	r3, [r7, #28]
 800063c:	fa93 f3a3 	rbit	r3, r3
 8000640:	61bb      	str	r3, [r7, #24]
  return result;
 8000642:	69bb      	ldr	r3, [r7, #24]
 8000644:	fab3 f383 	clz	r3, r3
 8000648:	b2db      	uxtb	r3, r3
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	6879      	ldr	r1, [r7, #4]
 800064e:	fa01 f303 	lsl.w	r3, r1, r3
 8000652:	431a      	orrs	r2, r3
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	60da      	str	r2, [r3, #12]
}
 8000658:	bf00      	nop
 800065a:	3724      	adds	r7, #36	; 0x24
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800066e:	683b      	ldr	r3, [r7, #0]
 8000670:	041a      	lsls	r2, r3, #16
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	619a      	str	r2, [r3, #24]
}
 8000676:	bf00      	nop
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr

08000682 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000682:	b480      	push	{r7}
 8000684:	b085      	sub	sp, #20
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
 800068a:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000692:	68fa      	ldr	r2, [r7, #12]
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	4013      	ands	r3, r2
 8000698:	041a      	lsls	r2, r3, #16
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	43d9      	mvns	r1, r3
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	400b      	ands	r3, r1
 80006a2:	431a      	orrs	r2, r3
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	619a      	str	r2, [r3, #24]
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80006b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80006bc:	f7ff fef8 	bl	80004b0 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80006c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80006c4:	f7ff fedc 	bl	8000480 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006c8:	2003      	movs	r0, #3
 80006ca:	f7ff fd7d 	bl	80001c8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80006ce:	f7ff fd9f 	bl	8000210 <__NVIC_GetPriorityGrouping>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2200      	movs	r2, #0
 80006d6:	210f      	movs	r1, #15
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff fdef 	bl	80002bc <NVIC_EncodePriority>
 80006de:	4603      	mov	r3, r0
 80006e0:	4619      	mov	r1, r3
 80006e2:	f04f 30ff 	mov.w	r0, #4294967295
 80006e6:	f7ff fdbf 	bl	8000268 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ea:	f000 f803 	bl	80006f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ee:	f000 f837 	bl	8000760 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x3e>

080006f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80006f8:	2000      	movs	r0, #0
 80006fa:	f7ff ff1f 	bl	800053c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80006fe:	bf00      	nop
 8000700:	f7ff ff30 	bl	8000564 <LL_FLASH_GetLatency>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d1fa      	bne.n	8000700 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800070a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800070e:	f7ff ff37 	bl	8000580 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 8000712:	2010      	movs	r0, #16
 8000714:	f7ff fe28 	bl	8000368 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 8000718:	f7ff fe04 	bl	8000324 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800071c:	bf00      	nop
 800071e:	f7ff fe11 	bl	8000344 <LL_RCC_HSI_IsReady>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d1fa      	bne.n	800071e <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000728:	2000      	movs	r0, #0
 800072a:	f7ff fe55 	bl	80003d8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800072e:	2000      	movs	r0, #0
 8000730:	f7ff fe66 	bl	8000400 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000734:	2000      	movs	r0, #0
 8000736:	f7ff fe77 	bl	8000428 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 800073a:	2000      	movs	r0, #0
 800073c:	f7ff fe2a 	bl	8000394 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000740:	bf00      	nop
 8000742:	f7ff fe3b 	bl	80003bc <LL_RCC_GetSysClkSource>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d1fa      	bne.n	8000742 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(16000000);
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <SystemClock_Config+0x68>)
 800074e:	f000 fbb5 	bl	8000ebc <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000752:	4802      	ldr	r0, [pc, #8]	; (800075c <SystemClock_Config+0x68>)
 8000754:	f000 fbc0 	bl	8000ed8 <LL_SetSystemCoreClock>
}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	00f42400 	.word	0x00f42400

08000760 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b088      	sub	sp, #32
 8000764:	af00      	add	r7, sp, #0
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000766:	f107 0318 	add.w	r3, r7, #24
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
 800077c:	611a      	str	r2, [r3, #16]
 800077e:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000780:	2004      	movs	r0, #4
 8000782:	f7ff fe65 	bl	8000450 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000786:	2008      	movs	r0, #8
 8000788:	f7ff fe62 	bl	8000450 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 800078c:	2101      	movs	r1, #1
 800078e:	4821      	ldr	r0, [pc, #132]	; (8000814 <MX_GPIO_Init+0xb4>)
 8000790:	f7ff ff68 	bl	8000664 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000794:	2301      	movs	r3, #1
 8000796:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000798:	2301      	movs	r3, #1
 800079a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a8:	463b      	mov	r3, r7
 80007aa:	4619      	mov	r1, r3
 80007ac:	4819      	ldr	r0, [pc, #100]	; (8000814 <MX_GPIO_Init+0xb4>)
 80007ae:	f000 faf7 	bl	8000da0 <LL_GPIO_Init>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE0);
 80007b2:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80007b6:	2003      	movs	r0, #3
 80007b8:	f7ff fe92 	bl	80004e0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80007bc:	2301      	movs	r3, #1
 80007be:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80007c8:	2302      	movs	r3, #2
 80007ca:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 80007cc:	f107 0318 	add.w	r3, r7, #24
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f961 	bl	8000a98 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(GPIOD, LL_GPIO_PIN_0, LL_GPIO_PULL_UP);
 80007d6:	2201      	movs	r2, #1
 80007d8:	2101      	movs	r1, #1
 80007da:	480f      	ldr	r0, [pc, #60]	; (8000818 <MX_GPIO_Init+0xb8>)
 80007dc:	f7ff ff13 	bl	8000606 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(GPIOD, LL_GPIO_PIN_0, LL_GPIO_MODE_INPUT);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2101      	movs	r1, #1
 80007e4:	480c      	ldr	r0, [pc, #48]	; (8000818 <MX_GPIO_Init+0xb8>)
 80007e6:	f7ff fedf 	bl	80005a8 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80007ea:	f7ff fd11 	bl	8000210 <__NVIC_GetPriorityGrouping>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f7ff fd61 	bl	80002bc <NVIC_EncodePriority>
 80007fa:	4603      	mov	r3, r0
 80007fc:	4619      	mov	r1, r3
 80007fe:	2006      	movs	r0, #6
 8000800:	f7ff fd32 	bl	8000268 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8000804:	2006      	movs	r0, #6
 8000806:	f7ff fd11 	bl	800022c <__NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800080a:	bf00      	nop
 800080c:	3720      	adds	r7, #32
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40020800 	.word	0x40020800
 8000818:	40020c00 	.word	0x40020c00

0800081c <user_button_callback>:

/* USER CODE BEGIN 4 */
void user_button_callback(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 8000820:	2101      	movs	r1, #1
 8000822:	4802      	ldr	r0, [pc, #8]	; (800082c <user_button_callback+0x10>)
 8000824:	f7ff ff2d 	bl	8000682 <LL_GPIO_TogglePin>
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40020800 	.word	0x40020800

08000830 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8000838:	4b07      	ldr	r3, [pc, #28]	; (8000858 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800083a:	695a      	ldr	r2, [r3, #20]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4013      	ands	r3, r2
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	429a      	cmp	r2, r3
 8000844:	bf0c      	ite	eq
 8000846:	2301      	moveq	r3, #1
 8000848:	2300      	movne	r3, #0
 800084a:	b2db      	uxtb	r3, r3
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	40013c00 	.word	0x40013c00

0800085c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR, ExtiLine);
 8000864:	4a04      	ldr	r2, [pc, #16]	; (8000878 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6153      	str	r3, [r2, #20]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40013c00 	.word	0x40013c00

0800087c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <NMI_Handler+0x4>

08000882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <HardFault_Handler+0x4>

08000888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <MemManage_Handler+0x4>

0800088e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <BusFault_Handler+0x4>

08000894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <UsageFault_Handler+0x4>

0800089a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	46bd      	mov	sp, r7
 80008a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a6:	4770      	bx	lr

080008a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr

080008c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr

080008d2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff ffaa 	bl	8000830 <LL_EXTI_IsActiveFlag_0_31>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d004      	beq.n	80008ec <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff ffba 	bl	800085c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_0 */
    user_button_callback();
 80008e8:	f7ff ff98 	bl	800081c <user_button_callback>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f4:	4b06      	ldr	r3, [pc, #24]	; (8000910 <SystemInit+0x20>)
 80008f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008fa:	4a05      	ldr	r2, [pc, #20]	; (8000910 <SystemInit+0x20>)
 80008fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	e000ed00 	.word	0xe000ed00

08000914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800094c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800091a:	490e      	ldr	r1, [pc, #56]	; (8000954 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800091c:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0b      	ldr	r2, [pc, #44]	; (800095c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000930:	4c0b      	ldr	r4, [pc, #44]	; (8000960 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800093e:	f7ff ffd7 	bl	80008f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000942:	f000 fad9 	bl	8000ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000946:	f7ff feb5 	bl	80006b4 <main>
  bx  lr    
 800094a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800094c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000950:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000954:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000958:	08000f60 	.word	0x08000f60
  ldr r2, =_sbss
 800095c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000960:	20000020 	.word	0x20000020

08000964 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000964:	e7fe      	b.n	8000964 <ADC_IRQHandler>
	...

08000968 <LL_EXTI_EnableIT_0_31>:
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR, ExtiLine);
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <LL_EXTI_EnableIT_0_31+0x20>)
 8000972:	681a      	ldr	r2, [r3, #0]
 8000974:	4904      	ldr	r1, [pc, #16]	; (8000988 <LL_EXTI_EnableIT_0_31+0x20>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4313      	orrs	r3, r2
 800097a:	600b      	str	r3, [r1, #0]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40013c00 	.word	0x40013c00

0800098c <LL_EXTI_DisableIT_0_31>:
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <LL_EXTI_DisableIT_0_31+0x24>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	43db      	mvns	r3, r3
 800099c:	4904      	ldr	r1, [pc, #16]	; (80009b0 <LL_EXTI_DisableIT_0_31+0x24>)
 800099e:	4013      	ands	r3, r2
 80009a0:	600b      	str	r3, [r1, #0]
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40013c00 	.word	0x40013c00

080009b4 <LL_EXTI_EnableEvent_0_31>:
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR, ExtiLine);
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80009be:	685a      	ldr	r2, [r3, #4]
 80009c0:	4904      	ldr	r1, [pc, #16]	; (80009d4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4313      	orrs	r3, r2
 80009c6:	604b      	str	r3, [r1, #4]
}
 80009c8:	bf00      	nop
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	40013c00 	.word	0x40013c00

080009d8 <LL_EXTI_DisableEvent_0_31>:
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR, ExtiLine);
 80009e0:	4b06      	ldr	r3, [pc, #24]	; (80009fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	43db      	mvns	r3, r3
 80009e8:	4904      	ldr	r1, [pc, #16]	; (80009fc <LL_EXTI_DisableEvent_0_31+0x24>)
 80009ea:	4013      	ands	r3, r2
 80009ec:	604b      	str	r3, [r1, #4]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40013c00 	.word	0x40013c00

08000a00 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR, ExtiLine);
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a0a:	689a      	ldr	r2, [r3, #8]
 8000a0c:	4904      	ldr	r1, [pc, #16]	; (8000a20 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	4313      	orrs	r3, r2
 8000a12:	608b      	str	r3, [r1, #8]
}
 8000a14:	bf00      	nop
 8000a16:	370c      	adds	r7, #12
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	40013c00 	.word	0x40013c00

08000a24 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR, ExtiLine);
 8000a2c:	4b06      	ldr	r3, [pc, #24]	; (8000a48 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	43db      	mvns	r3, r3
 8000a34:	4904      	ldr	r1, [pc, #16]	; (8000a48 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000a36:	4013      	ands	r3, r2
 8000a38:	608b      	str	r3, [r1, #8]
}
 8000a3a:	bf00      	nop
 8000a3c:	370c      	adds	r7, #12
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	40013c00 	.word	0x40013c00

08000a4c <LL_EXTI_EnableFallingTrig_0_31>:
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR, ExtiLine);
 8000a54:	4b05      	ldr	r3, [pc, #20]	; (8000a6c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000a56:	68da      	ldr	r2, [r3, #12]
 8000a58:	4904      	ldr	r1, [pc, #16]	; (8000a6c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	60cb      	str	r3, [r1, #12]
}
 8000a60:	bf00      	nop
 8000a62:	370c      	adds	r7, #12
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40013c00 	.word	0x40013c00

08000a70 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR, ExtiLine);
 8000a78:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000a7a:	68da      	ldr	r2, [r3, #12]
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	4904      	ldr	r1, [pc, #16]	; (8000a94 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000a82:	4013      	ands	r3, r2
 8000a84:	60cb      	str	r3, [r1, #12]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	40013c00 	.word	0x40013c00

08000a98 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	791b      	ldrb	r3, [r3, #4]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d065      	beq.n	8000b78 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d06b      	beq.n	8000b8c <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	795b      	ldrb	r3, [r3, #5]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d01c      	beq.n	8000af6 <LL_EXTI_Init+0x5e>
 8000abc:	2b02      	cmp	r3, #2
 8000abe:	dc25      	bgt.n	8000b0c <LL_EXTI_Init+0x74>
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d002      	beq.n	8000aca <LL_EXTI_Init+0x32>
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d00b      	beq.n	8000ae0 <LL_EXTI_Init+0x48>
 8000ac8:	e020      	b.n	8000b0c <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f7ff ff82 	bl	80009d8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff ff45 	bl	8000968 <LL_EXTI_EnableIT_0_31>
          break;
 8000ade:	e018      	b.n	8000b12 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f7ff ff51 	bl	800098c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff ff60 	bl	80009b4 <LL_EXTI_EnableEvent_0_31>
          break;
 8000af4:	e00d      	b.n	8000b12 <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ff34 	bl	8000968 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ff55 	bl	80009b4 <LL_EXTI_EnableEvent_0_31>
          break;
 8000b0a:	e002      	b.n	8000b12 <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	73fb      	strb	r3, [r7, #15]
          break;
 8000b10:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	799b      	ldrb	r3, [r3, #6]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d038      	beq.n	8000b8c <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	799b      	ldrb	r3, [r3, #6]
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d01c      	beq.n	8000b5c <LL_EXTI_Init+0xc4>
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	dc25      	bgt.n	8000b72 <LL_EXTI_Init+0xda>
 8000b26:	2b01      	cmp	r3, #1
 8000b28:	d002      	beq.n	8000b30 <LL_EXTI_Init+0x98>
 8000b2a:	2b02      	cmp	r3, #2
 8000b2c:	d00b      	beq.n	8000b46 <LL_EXTI_Init+0xae>
 8000b2e:	e020      	b.n	8000b72 <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff9b 	bl	8000a70 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff5e 	bl	8000a00 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8000b44:	e022      	b.n	8000b8c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff6a 	bl	8000a24 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff79 	bl	8000a4c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000b5a:	e017      	b.n	8000b8c <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4618      	mov	r0, r3
 8000b62:	f7ff ff4d 	bl	8000a00 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f7ff ff6e 	bl	8000a4c <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8000b70:	e00c      	b.n	8000b8c <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	73fb      	strb	r3, [r7, #15]
            break;
 8000b76:	e009      	b.n	8000b8c <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff05 	bl	800098c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff ff26 	bl	80009d8 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8000b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <LL_GPIO_SetPinMode>:
{
 8000b96:	b480      	push	{r7}
 8000b98:	b089      	sub	sp, #36	; 0x24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681a      	ldr	r2, [r3, #0]
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	fa93 f3a3 	rbit	r3, r3
 8000bb0:	613b      	str	r3, [r7, #16]
  return result;
 8000bb2:	693b      	ldr	r3, [r7, #16]
 8000bb4:	fab3 f383 	clz	r3, r3
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	005b      	lsls	r3, r3, #1
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	401a      	ands	r2, r3
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	fa93 f3a3 	rbit	r3, r3
 8000bd0:	61bb      	str	r3, [r7, #24]
  return result;
 8000bd2:	69bb      	ldr	r3, [r7, #24]
 8000bd4:	fab3 f383 	clz	r3, r3
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	6879      	ldr	r1, [r7, #4]
 8000bde:	fa01 f303 	lsl.w	r3, r1, r3
 8000be2:	431a      	orrs	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	601a      	str	r2, [r3, #0]
}
 8000be8:	bf00      	nop
 8000bea:	3724      	adds	r7, #36	; 0x24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf2:	4770      	bx	lr

08000bf4 <LL_GPIO_SetPinOutputType>:
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	685a      	ldr	r2, [r3, #4]
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	401a      	ands	r2, r3
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	6879      	ldr	r1, [r7, #4]
 8000c0e:	fb01 f303 	mul.w	r3, r1, r3
 8000c12:	431a      	orrs	r2, r3
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	605a      	str	r2, [r3, #4]
}
 8000c18:	bf00      	nop
 8000c1a:	3714      	adds	r7, #20
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <LL_GPIO_SetPinSpeed>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	689a      	ldr	r2, [r3, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa93 f3a3 	rbit	r3, r3
 8000c3e:	613b      	str	r3, [r7, #16]
  return result;
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	fab3 f383 	clz	r3, r3
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2103      	movs	r1, #3
 8000c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c50:	43db      	mvns	r3, r3
 8000c52:	401a      	ands	r2, r3
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c58:	69fb      	ldr	r3, [r7, #28]
 8000c5a:	fa93 f3a3 	rbit	r3, r3
 8000c5e:	61bb      	str	r3, [r7, #24]
  return result;
 8000c60:	69bb      	ldr	r3, [r7, #24]
 8000c62:	fab3 f383 	clz	r3, r3
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	6879      	ldr	r1, [r7, #4]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	431a      	orrs	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	609a      	str	r2, [r3, #8]
}
 8000c76:	bf00      	nop
 8000c78:	3724      	adds	r7, #36	; 0x24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <LL_GPIO_SetPinPull>:
{
 8000c82:	b480      	push	{r7}
 8000c84:	b089      	sub	sp, #36	; 0x24
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	60f8      	str	r0, [r7, #12]
 8000c8a:	60b9      	str	r1, [r7, #8]
 8000c8c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	fa93 f3a3 	rbit	r3, r3
 8000c9c:	613b      	str	r3, [r7, #16]
  return result;
 8000c9e:	693b      	ldr	r3, [r7, #16]
 8000ca0:	fab3 f383 	clz	r3, r3
 8000ca4:	b2db      	uxtb	r3, r3
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	2103      	movs	r1, #3
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	401a      	ands	r2, r3
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa93 f3a3 	rbit	r3, r3
 8000cbc:	61bb      	str	r3, [r7, #24]
  return result;
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	fab3 f383 	clz	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	005b      	lsls	r3, r3, #1
 8000cc8:	6879      	ldr	r1, [r7, #4]
 8000cca:	fa01 f303 	lsl.w	r3, r1, r3
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	60da      	str	r2, [r3, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3724      	adds	r7, #36	; 0x24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <LL_GPIO_SetAFPin_0_7>:
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	6a1a      	ldr	r2, [r3, #32]
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	fa93 f3a3 	rbit	r3, r3
 8000cfa:	613b      	str	r3, [r7, #16]
  return result;
 8000cfc:	693b      	ldr	r3, [r7, #16]
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	b2db      	uxtb	r3, r3
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	210f      	movs	r1, #15
 8000d08:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	401a      	ands	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	fa93 f3a3 	rbit	r3, r3
 8000d1a:	61bb      	str	r3, [r7, #24]
  return result;
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fab3 f383 	clz	r3, r3
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	431a      	orrs	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	621a      	str	r2, [r3, #32]
}
 8000d32:	bf00      	nop
 8000d34:	3724      	adds	r7, #36	; 0x24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <LL_GPIO_SetAFPin_8_15>:
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b089      	sub	sp, #36	; 0x24
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	0a1b      	lsrs	r3, r3, #8
 8000d52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	fa93 f3a3 	rbit	r3, r3
 8000d5a:	613b      	str	r3, [r7, #16]
  return result;
 8000d5c:	693b      	ldr	r3, [r7, #16]
 8000d5e:	fab3 f383 	clz	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	210f      	movs	r1, #15
 8000d68:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6c:	43db      	mvns	r3, r3
 8000d6e:	401a      	ands	r2, r3
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	0a1b      	lsrs	r3, r3, #8
 8000d74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	fa93 f3a3 	rbit	r3, r3
 8000d7c:	61bb      	str	r3, [r7, #24]
  return result;
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	fab3 f383 	clz	r3, r3
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	6879      	ldr	r1, [r7, #4]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	431a      	orrs	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000d94:	bf00      	nop
 8000d96:	3724      	adds	r7, #36	; 0x24
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000dae:	2300      	movs	r3, #0
 8000db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	fa93 f3a3 	rbit	r3, r3
 8000dbe:	613b      	str	r3, [r7, #16]
  return result;
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	fab3 f383 	clz	r3, r3
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000dca:	e050      	b.n	8000e6e <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d042      	beq.n	8000e68 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d003      	beq.n	8000df2 <LL_GPIO_Init+0x52>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d10d      	bne.n	8000e0e <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	689b      	ldr	r3, [r3, #8]
 8000df6:	461a      	mov	r2, r3
 8000df8:	69b9      	ldr	r1, [r7, #24]
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f7ff ff12 	bl	8000c24 <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	461a      	mov	r2, r3
 8000e06:	69b9      	ldr	r1, [r7, #24]
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f7ff fef3 	bl	8000bf4 <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	691b      	ldr	r3, [r3, #16]
 8000e12:	461a      	mov	r2, r3
 8000e14:	69b9      	ldr	r1, [r7, #24]
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff33 	bl	8000c82 <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	2b02      	cmp	r3, #2
 8000e22:	d11a      	bne.n	8000e5a <LL_GPIO_Init+0xba>
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	fa93 f3a3 	rbit	r3, r3
 8000e2e:	60bb      	str	r3, [r7, #8]
  return result;
 8000e30:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8000e32:	fab3 f383 	clz	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
 8000e38:	2b07      	cmp	r3, #7
 8000e3a:	d807      	bhi.n	8000e4c <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	461a      	mov	r2, r3
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	6878      	ldr	r0, [r7, #4]
 8000e46:	f7ff ff4b 	bl	8000ce0 <LL_GPIO_SetAFPin_0_7>
 8000e4a:	e006      	b.n	8000e5a <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	461a      	mov	r2, r3
 8000e52:	69b9      	ldr	r1, [r7, #24]
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff72 	bl	8000d3e <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	69b9      	ldr	r1, [r7, #24]
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f7ff fe97 	bl	8000b96 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	fa22 f303 	lsr.w	r3, r2, r3
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d1a7      	bne.n	8000dcc <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3720      	adds	r7, #32
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4a07      	ldr	r2, [pc, #28]	; (8000eb8 <LL_InitTick+0x30>)
 8000e9c:	3b01      	subs	r3, #1
 8000e9e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <LL_InitTick+0x30>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <LL_InitTick+0x30>)
 8000ea8:	2205      	movs	r2, #5
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000ec4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ffdd 	bl	8000e88 <LL_InitTick>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <LL_SetSystemCoreClock+0x1c>)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6013      	str	r3, [r2, #0]
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	20000000 	.word	0x20000000

08000ef8 <__libc_init_array>:
 8000ef8:	b570      	push	{r4, r5, r6, lr}
 8000efa:	4d0d      	ldr	r5, [pc, #52]	; (8000f30 <__libc_init_array+0x38>)
 8000efc:	4c0d      	ldr	r4, [pc, #52]	; (8000f34 <__libc_init_array+0x3c>)
 8000efe:	1b64      	subs	r4, r4, r5
 8000f00:	10a4      	asrs	r4, r4, #2
 8000f02:	2600      	movs	r6, #0
 8000f04:	42a6      	cmp	r6, r4
 8000f06:	d109      	bne.n	8000f1c <__libc_init_array+0x24>
 8000f08:	4d0b      	ldr	r5, [pc, #44]	; (8000f38 <__libc_init_array+0x40>)
 8000f0a:	4c0c      	ldr	r4, [pc, #48]	; (8000f3c <__libc_init_array+0x44>)
 8000f0c:	f000 f818 	bl	8000f40 <_init>
 8000f10:	1b64      	subs	r4, r4, r5
 8000f12:	10a4      	asrs	r4, r4, #2
 8000f14:	2600      	movs	r6, #0
 8000f16:	42a6      	cmp	r6, r4
 8000f18:	d105      	bne.n	8000f26 <__libc_init_array+0x2e>
 8000f1a:	bd70      	pop	{r4, r5, r6, pc}
 8000f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f20:	4798      	blx	r3
 8000f22:	3601      	adds	r6, #1
 8000f24:	e7ee      	b.n	8000f04 <__libc_init_array+0xc>
 8000f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000f2a:	4798      	blx	r3
 8000f2c:	3601      	adds	r6, #1
 8000f2e:	e7f2      	b.n	8000f16 <__libc_init_array+0x1e>
 8000f30:	08000f58 	.word	0x08000f58
 8000f34:	08000f58 	.word	0x08000f58
 8000f38:	08000f58 	.word	0x08000f58
 8000f3c:	08000f5c 	.word	0x08000f5c

08000f40 <_init>:
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	bf00      	nop
 8000f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f46:	bc08      	pop	{r3}
 8000f48:	469e      	mov	lr, r3
 8000f4a:	4770      	bx	lr

08000f4c <_fini>:
 8000f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f4e:	bf00      	nop
 8000f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f52:	bc08      	pop	{r3}
 8000f54:	469e      	mov	lr, r3
 8000f56:	4770      	bx	lr
