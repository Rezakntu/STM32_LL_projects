
stm32_led_blink_LL_bluepill.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008f8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a04  08000a04  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a04  08000a04  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000a04  08000a04  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a04  08000a04  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a04  08000a04  00010a04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a08  08000a08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000a0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08000a10  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000a10  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001f5e  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000925  00000000  00000000  00021f8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000002e8  00000000  00000000  000228b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000290  00000000  00000000  00022b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001107d  00000000  00000000  00022e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000245d  00000000  00000000  00033ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a138  00000000  00000000  00036302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009043a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a88  00000000  00000000  00090490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	080009ec 	.word	0x080009ec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	080009ec 	.word	0x080009ec

0800014c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	f003 0307 	and.w	r3, r3, #7
 800015a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800015c:	4b0c      	ldr	r3, [pc, #48]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 800015e:	68db      	ldr	r3, [r3, #12]
 8000160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000162:	68ba      	ldr	r2, [r7, #8]
 8000164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000168:	4013      	ands	r3, r2
 800016a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000170:	68bb      	ldr	r3, [r7, #8]
 8000172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800017c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800017e:	4a04      	ldr	r2, [pc, #16]	; (8000190 <__NVIC_SetPriorityGrouping+0x44>)
 8000180:	68bb      	ldr	r3, [r7, #8]
 8000182:	60d3      	str	r3, [r2, #12]
}
 8000184:	bf00      	nop
 8000186:	3714      	adds	r7, #20
 8000188:	46bd      	mov	sp, r7
 800018a:	bc80      	pop	{r7}
 800018c:	4770      	bx	lr
 800018e:	bf00      	nop
 8000190:	e000ed00 	.word	0xe000ed00

08000194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__NVIC_GetPriorityGrouping+0x18>)
 800019a:	68db      	ldr	r3, [r3, #12]
 800019c:	0a1b      	lsrs	r3, r3, #8
 800019e:	f003 0307 	and.w	r3, r3, #7
}
 80001a2:	4618      	mov	r0, r3
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	e000ed00 	.word	0xe000ed00

080001b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80001b0:	b480      	push	{r7}
 80001b2:	b083      	sub	sp, #12
 80001b4:	af00      	add	r7, sp, #0
 80001b6:	4603      	mov	r3, r0
 80001b8:	6039      	str	r1, [r7, #0]
 80001ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001c0:	2b00      	cmp	r3, #0
 80001c2:	db0a      	blt.n	80001da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001c4:	683b      	ldr	r3, [r7, #0]
 80001c6:	b2da      	uxtb	r2, r3
 80001c8:	490c      	ldr	r1, [pc, #48]	; (80001fc <__NVIC_SetPriority+0x4c>)
 80001ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001ce:	0112      	lsls	r2, r2, #4
 80001d0:	b2d2      	uxtb	r2, r2
 80001d2:	440b      	add	r3, r1
 80001d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001d8:	e00a      	b.n	80001f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001da:	683b      	ldr	r3, [r7, #0]
 80001dc:	b2da      	uxtb	r2, r3
 80001de:	4908      	ldr	r1, [pc, #32]	; (8000200 <__NVIC_SetPriority+0x50>)
 80001e0:	79fb      	ldrb	r3, [r7, #7]
 80001e2:	f003 030f 	and.w	r3, r3, #15
 80001e6:	3b04      	subs	r3, #4
 80001e8:	0112      	lsls	r2, r2, #4
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	440b      	add	r3, r1
 80001ee:	761a      	strb	r2, [r3, #24]
}
 80001f0:	bf00      	nop
 80001f2:	370c      	adds	r7, #12
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	e000e100 	.word	0xe000e100
 8000200:	e000ed00 	.word	0xe000ed00

08000204 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000204:	b480      	push	{r7}
 8000206:	b089      	sub	sp, #36	; 0x24
 8000208:	af00      	add	r7, sp, #0
 800020a:	60f8      	str	r0, [r7, #12]
 800020c:	60b9      	str	r1, [r7, #8]
 800020e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	f003 0307 	and.w	r3, r3, #7
 8000216:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000218:	69fb      	ldr	r3, [r7, #28]
 800021a:	f1c3 0307 	rsb	r3, r3, #7
 800021e:	2b04      	cmp	r3, #4
 8000220:	bf28      	it	cs
 8000222:	2304      	movcs	r3, #4
 8000224:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	69fb      	ldr	r3, [r7, #28]
 8000228:	3304      	adds	r3, #4
 800022a:	2b06      	cmp	r3, #6
 800022c:	d902      	bls.n	8000234 <NVIC_EncodePriority+0x30>
 800022e:	69fb      	ldr	r3, [r7, #28]
 8000230:	3b03      	subs	r3, #3
 8000232:	e000      	b.n	8000236 <NVIC_EncodePriority+0x32>
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	f04f 32ff 	mov.w	r2, #4294967295
 800023c:	69bb      	ldr	r3, [r7, #24]
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	43da      	mvns	r2, r3
 8000244:	68bb      	ldr	r3, [r7, #8]
 8000246:	401a      	ands	r2, r3
 8000248:	697b      	ldr	r3, [r7, #20]
 800024a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800024c:	f04f 31ff 	mov.w	r1, #4294967295
 8000250:	697b      	ldr	r3, [r7, #20]
 8000252:	fa01 f303 	lsl.w	r3, r1, r3
 8000256:	43d9      	mvns	r1, r3
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800025c:	4313      	orrs	r3, r2
         );
}
 800025e:	4618      	mov	r0, r3
 8000260:	3724      	adds	r7, #36	; 0x24
 8000262:	46bd      	mov	sp, r7
 8000264:	bc80      	pop	{r7}
 8000266:	4770      	bx	lr

08000268 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <LL_RCC_HSE_Enable+0x18>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a03      	ldr	r2, [pc, #12]	; (8000280 <LL_RCC_HSE_Enable+0x18>)
 8000272:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000276:	6013      	str	r3, [r2, #0]
}
 8000278:	bf00      	nop
 800027a:	46bd      	mov	sp, r7
 800027c:	bc80      	pop	{r7}
 800027e:	4770      	bx	lr
 8000280:	40021000 	.word	0x40021000

08000284 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <LL_RCC_HSE_IsReady+0x20>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000290:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000294:	bf0c      	ite	eq
 8000296:	2301      	moveq	r3, #1
 8000298:	2300      	movne	r3, #0
 800029a:	b2db      	uxtb	r3, r3
}
 800029c:	4618      	mov	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	bc80      	pop	{r7}
 80002a2:	4770      	bx	lr
 80002a4:	40021000 	.word	0x40021000

080002a8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80002b0:	4b06      	ldr	r3, [pc, #24]	; (80002cc <LL_RCC_SetSysClkSource+0x24>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	f023 0203 	bic.w	r2, r3, #3
 80002b8:	4904      	ldr	r1, [pc, #16]	; (80002cc <LL_RCC_SetSysClkSource+0x24>)
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	4313      	orrs	r3, r2
 80002be:	604b      	str	r3, [r1, #4]
}
 80002c0:	bf00      	nop
 80002c2:	370c      	adds	r7, #12
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bc80      	pop	{r7}
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40021000 	.word	0x40021000

080002d0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80002d4:	4b03      	ldr	r3, [pc, #12]	; (80002e4 <LL_RCC_GetSysClkSource+0x14>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	f003 030c 	and.w	r3, r3, #12
}
 80002dc:	4618      	mov	r0, r3
 80002de:	46bd      	mov	sp, r7
 80002e0:	bc80      	pop	{r7}
 80002e2:	4770      	bx	lr
 80002e4:	40021000 	.word	0x40021000

080002e8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b083      	sub	sp, #12
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80002f0:	4b06      	ldr	r3, [pc, #24]	; (800030c <LL_RCC_SetAHBPrescaler+0x24>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80002f8:	4904      	ldr	r1, [pc, #16]	; (800030c <LL_RCC_SetAHBPrescaler+0x24>)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	4313      	orrs	r3, r2
 80002fe:	604b      	str	r3, [r1, #4]
}
 8000300:	bf00      	nop
 8000302:	370c      	adds	r7, #12
 8000304:	46bd      	mov	sp, r7
 8000306:	bc80      	pop	{r7}
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <LL_RCC_SetAPB1Prescaler+0x24>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000320:	4904      	ldr	r1, [pc, #16]	; (8000334 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4313      	orrs	r3, r2
 8000326:	604b      	str	r3, [r1, #4]
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	40021000 	.word	0x40021000

08000338 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000338:	b480      	push	{r7}
 800033a:	b083      	sub	sp, #12
 800033c:	af00      	add	r7, sp, #0
 800033e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000348:	4904      	ldr	r1, [pc, #16]	; (800035c <LL_RCC_SetAPB2Prescaler+0x24>)
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	4313      	orrs	r3, r2
 800034e:	604b      	str	r3, [r1, #4]
}
 8000350:	bf00      	nop
 8000352:	370c      	adds	r7, #12
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
 800035a:	bf00      	nop
 800035c:	40021000 	.word	0x40021000

08000360 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000364:	4b04      	ldr	r3, [pc, #16]	; (8000378 <LL_RCC_PLL_Enable+0x18>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a03      	ldr	r2, [pc, #12]	; (8000378 <LL_RCC_PLL_Enable+0x18>)
 800036a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800036e:	6013      	str	r3, [r2, #0]
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000380:	4b06      	ldr	r3, [pc, #24]	; (800039c <LL_RCC_PLL_IsReady+0x20>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000388:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800038c:	bf0c      	ite	eq
 800038e:	2301      	moveq	r3, #1
 8000390:	2300      	movne	r3, #0
 8000392:	b2db      	uxtb	r3, r3
}
 8000394:	4618      	mov	r0, r3
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr
 800039c:	40021000 	.word	0x40021000

080003a0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL,
 80003aa:	4b08      	ldr	r3, [pc, #32]	; (80003cc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003ac:	685b      	ldr	r3, [r3, #4]
 80003ae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80003b8:	683b      	ldr	r3, [r7, #0]
 80003ba:	430b      	orrs	r3, r1
 80003bc:	4903      	ldr	r1, [pc, #12]	; (80003cc <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80003be:	4313      	orrs	r3, r2
 80003c0:	604b      	str	r3, [r1, #4]
             (Source & RCC_CFGR2_PREDIV1) | ((Source & (RCC_CFGR2_PREDIV1SRC << 4U)) >> 4U));
#else
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV1, (Source & RCC_CFGR2_PREDIV1));
#endif /*RCC_CFGR2_PREDIV1SRC*/
#endif /*RCC_CFGR2_PREDIV1*/
}
 80003c2:	bf00      	nop
 80003c4:	370c      	adds	r7, #12
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bc80      	pop	{r7}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80003da:	69da      	ldr	r2, [r3, #28]
 80003dc:	4907      	ldr	r1, [pc, #28]	; (80003fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4313      	orrs	r3, r2
 80003e2:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003e4:	4b05      	ldr	r3, [pc, #20]	; (80003fc <LL_APB1_GRP1_EnableClock+0x2c>)
 80003e6:	69da      	ldr	r2, [r3, #28]
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4013      	ands	r3, r2
 80003ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ee:	68fb      	ldr	r3, [r7, #12]
}
 80003f0:	bf00      	nop
 80003f2:	3714      	adds	r7, #20
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	40021000 	.word	0x40021000

08000400 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000400:	b480      	push	{r7}
 8000402:	b085      	sub	sp, #20
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000408:	4b08      	ldr	r3, [pc, #32]	; (800042c <LL_APB2_GRP1_EnableClock+0x2c>)
 800040a:	699a      	ldr	r2, [r3, #24]
 800040c:	4907      	ldr	r1, [pc, #28]	; (800042c <LL_APB2_GRP1_EnableClock+0x2c>)
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4313      	orrs	r3, r2
 8000412:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000414:	4b05      	ldr	r3, [pc, #20]	; (800042c <LL_APB2_GRP1_EnableClock+0x2c>)
 8000416:	699a      	ldr	r2, [r3, #24]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4013      	ands	r3, r2
 800041c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800041e:	68fb      	ldr	r3, [r7, #12]
}
 8000420:	bf00      	nop
 8000422:	3714      	adds	r7, #20
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	40021000 	.word	0x40021000

08000430 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000438:	4b06      	ldr	r3, [pc, #24]	; (8000454 <LL_FLASH_SetLatency+0x24>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f023 0207 	bic.w	r2, r3, #7
 8000440:	4904      	ldr	r1, [pc, #16]	; (8000454 <LL_FLASH_SetLatency+0x24>)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4313      	orrs	r3, r2
 8000446:	600b      	str	r3, [r1, #0]
}
 8000448:	bf00      	nop
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	40022000 	.word	0x40022000

08000458 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800045c:	4b03      	ldr	r3, [pc, #12]	; (800046c <LL_FLASH_GetLatency+0x14>)
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	f003 0307 	and.w	r3, r3, #7
}
 8000464:	4618      	mov	r0, r3
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr
 800046c:	40022000 	.word	0x40022000

08000470 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
 8000478:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	0a1b      	lsrs	r3, r3, #8
 800047e:	b29a      	uxth	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	611a      	str	r2, [r3, #16]
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr

0800048e <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800048e:	b480      	push	{r7}
 8000490:	b083      	sub	sp, #12
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, (PinMask >> GPIO_PIN_MASK_POS) & 0x0000FFFFU);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	0a1b      	lsrs	r3, r3, #8
 800049c:	b29a      	uxth	r2, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	615a      	str	r2, [r3, #20]
}
 80004a2:	bf00      	nop
 80004a4:	370c      	adds	r7, #12
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <LL_GPIO_AF_Remap_SWJ_NOJTAG>:
  * @rmtoll MAPR          SWJ_CFG           LL_GPIO_AF_Remap_SWJ_NOJTAG
  * @note  NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_AF_Remap_SWJ_NOJTAG(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  MODIFY_REG(AFIO->MAPR, AFIO_MAPR_SWJ_CFG, AFIO_MAPR_SWJ_CFG_JTAGDISABLE);
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004b8:	4a03      	ldr	r2, [pc, #12]	; (80004c8 <LL_GPIO_AF_Remap_SWJ_NOJTAG+0x1c>)
 80004ba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004be:	6053      	str	r3, [r2, #4]
}
 80004c0:	bf00      	nop
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr
 80004c8:	40010000 	.word	0x40010000

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
 80004d0:	2001      	movs	r0, #1
 80004d2:	f7ff ff95 	bl	8000400 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80004d6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80004da:	f7ff ff79 	bl	80003d0 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004de:	2003      	movs	r0, #3
 80004e0:	f7ff fe34 	bl	800014c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80004e4:	f7ff fe56 	bl	8000194 <__NVIC_GetPriorityGrouping>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2200      	movs	r2, #0
 80004ec:	210f      	movs	r1, #15
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff fe88 	bl	8000204 <NVIC_EncodePriority>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4619      	mov	r1, r3
 80004f8:	f04f 30ff 	mov.w	r0, #4294967295
 80004fc:	f7ff fe58 	bl	80001b0 <__NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  LL_GPIO_AF_Remap_SWJ_NOJTAG();
 8000500:	f7ff ffd4 	bl	80004ac <LL_GPIO_AF_Remap_SWJ_NOJTAG>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f818 	bl	8000538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f854 	bl	80005b4 <MX_GPIO_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800050c:	4908      	ldr	r1, [pc, #32]	; (8000530 <main+0x64>)
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <main+0x68>)
 8000510:	f7ff ffae 	bl	8000470 <LL_GPIO_SetOutputPin>
    LL_mDelay(1000);
 8000514:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000518:	f000 fa12 	bl	8000940 <LL_mDelay>
    LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800051c:	4904      	ldr	r1, [pc, #16]	; (8000530 <main+0x64>)
 800051e:	4805      	ldr	r0, [pc, #20]	; (8000534 <main+0x68>)
 8000520:	f7ff ffb5 	bl	800048e <LL_GPIO_ResetOutputPin>
    LL_mDelay(1000);
 8000524:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000528:	f000 fa0a 	bl	8000940 <LL_mDelay>
    LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_13);
 800052c:	e7ee      	b.n	800050c <main+0x40>
 800052e:	bf00      	nop
 8000530:	04200020 	.word	0x04200020
 8000534:	40011000 	.word	0x40011000

08000538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800053c:	2002      	movs	r0, #2
 800053e:	f7ff ff77 	bl	8000430 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_2)
 8000542:	bf00      	nop
 8000544:	f7ff ff88 	bl	8000458 <LL_FLASH_GetLatency>
 8000548:	4603      	mov	r3, r0
 800054a:	2b02      	cmp	r3, #2
 800054c:	d1fa      	bne.n	8000544 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSE_Enable();
 800054e:	f7ff fe8b 	bl	8000268 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000552:	bf00      	nop
 8000554:	f7ff fe96 	bl	8000284 <LL_RCC_HSE_IsReady>
 8000558:	4603      	mov	r3, r0
 800055a:	2b01      	cmp	r3, #1
 800055c:	d1fa      	bne.n	8000554 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE_DIV_1, LL_RCC_PLL_MUL_9);
 800055e:	f44f 11e0 	mov.w	r1, #1835008	; 0x1c0000
 8000562:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000566:	f7ff ff1b 	bl	80003a0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 800056a:	f7ff fef9 	bl	8000360 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 800056e:	bf00      	nop
 8000570:	f7ff ff04 	bl	800037c <LL_RCC_PLL_IsReady>
 8000574:	4603      	mov	r3, r0
 8000576:	2b01      	cmp	r3, #1
 8000578:	d1fa      	bne.n	8000570 <SystemClock_Config+0x38>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800057a:	2000      	movs	r0, #0
 800057c:	f7ff feb4 	bl	80002e8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 8000580:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000584:	f7ff fec4 	bl	8000310 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff fed5 	bl	8000338 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800058e:	2002      	movs	r0, #2
 8000590:	f7ff fe8a 	bl	80002a8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000594:	bf00      	nop
 8000596:	f7ff fe9b 	bl	80002d0 <LL_RCC_GetSysClkSource>
 800059a:	4603      	mov	r3, r0
 800059c:	2b08      	cmp	r3, #8
 800059e:	d1fa      	bne.n	8000596 <SystemClock_Config+0x5e>
  {

  }
  LL_Init1msTick(72000000);
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <SystemClock_Config+0x78>)
 80005a2:	f000 f9bf 	bl	8000924 <LL_Init1msTick>
  LL_SetSystemCoreClock(72000000);
 80005a6:	4802      	ldr	r0, [pc, #8]	; (80005b0 <SystemClock_Config+0x78>)
 80005a8:	f000 f9ee 	bl	8000988 <LL_SetSystemCoreClock>
}
 80005ac:	bf00      	nop
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	044aa200 	.word	0x044aa200

080005b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOC);
 80005c8:	2010      	movs	r0, #16
 80005ca:	f7ff ff19 	bl	8000400 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOD);
 80005ce:	2020      	movs	r0, #32
 80005d0:	f7ff ff16 	bl	8000400 <LL_APB2_GRP1_EnableClock>
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 80005d4:	2004      	movs	r0, #4
 80005d6:	f7ff ff13 	bl	8000400 <LL_APB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_13);
 80005da:	490a      	ldr	r1, [pc, #40]	; (8000604 <MX_GPIO_Init+0x50>)
 80005dc:	480a      	ldr	r0, [pc, #40]	; (8000608 <MX_GPIO_Init+0x54>)
 80005de:	f7ff ff56 	bl	800048e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_13;
 80005e2:	4b08      	ldr	r3, [pc, #32]	; (8000604 <MX_GPIO_Init+0x50>)
 80005e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005e6:	2301      	movs	r3, #1
 80005e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005ea:	2302      	movs	r3, #2
 80005ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4804      	ldr	r0, [pc, #16]	; (8000608 <MX_GPIO_Init+0x54>)
 80005f8:	f000 f913 	bl	8000822 <LL_GPIO_Init>

}
 80005fc:	bf00      	nop
 80005fe:	3718      	adds	r7, #24
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	04200020 	.word	0x04200020
 8000608:	40011000 	.word	0x40011000

0800060c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000610:	e7fe      	b.n	8000610 <NMI_Handler+0x4>

08000612 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000612:	b480      	push	{r7}
 8000614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000616:	e7fe      	b.n	8000616 <HardFault_Handler+0x4>

08000618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800061c:	e7fe      	b.n	800061c <MemManage_Handler+0x4>

0800061e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800061e:	b480      	push	{r7}
 8000620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000622:	e7fe      	b.n	8000622 <BusFault_Handler+0x4>

08000624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000628:	e7fe      	b.n	8000628 <UsageFault_Handler+0x4>

0800062a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800062a:	b480      	push	{r7}
 800062c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800062e:	bf00      	nop
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr

08000636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000636:	b480      	push	{r7}
 8000638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr

08000642 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000642:	b480      	push	{r7}
 8000644:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	46bd      	mov	sp, r7
 800064a:	bc80      	pop	{r7}
 800064c:	4770      	bx	lr

0800064e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bc80      	pop	{r7}
 8000658:	4770      	bx	lr

0800065a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800065e:	bf00      	nop
 8000660:	46bd      	mov	sp, r7
 8000662:	bc80      	pop	{r7}
 8000664:	4770      	bx	lr
	...

08000668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000668:	f7ff fff7 	bl	800065a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800066c:	480b      	ldr	r0, [pc, #44]	; (800069c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800066e:	490c      	ldr	r1, [pc, #48]	; (80006a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000670:	4a0c      	ldr	r2, [pc, #48]	; (80006a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000674:	e002      	b.n	800067c <LoopCopyDataInit>

08000676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800067a:	3304      	adds	r3, #4

0800067c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800067c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800067e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000680:	d3f9      	bcc.n	8000676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000682:	4a09      	ldr	r2, [pc, #36]	; (80006a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000684:	4c09      	ldr	r4, [pc, #36]	; (80006ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000688:	e001      	b.n	800068e <LoopFillZerobss>

0800068a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800068a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800068c:	3204      	adds	r2, #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800068e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000690:	d3fb      	bcc.n	800068a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000692:	f000 f987 	bl	80009a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000696:	f7ff ff19 	bl	80004cc <main>
  bx lr
 800069a:	4770      	bx	lr
  ldr r0, =_sdata
 800069c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006a0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80006a4:	08000a0c 	.word	0x08000a0c
  ldr r2, =_sbss
 80006a8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80006ac:	20000020 	.word	0x20000020

080006b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006b0:	e7fe      	b.n	80006b0 <ADC1_2_IRQHandler>

080006b2 <LL_GPIO_SetPinMode>:
{
 80006b2:	b490      	push	{r4, r7}
 80006b4:	b088      	sub	sp, #32
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	60f8      	str	r0, [r7, #12]
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	461a      	mov	r2, r3
 80006c2:	68bb      	ldr	r3, [r7, #8]
 80006c4:	0e1b      	lsrs	r3, r3, #24
 80006c6:	4413      	add	r3, r2
 80006c8:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 80006ca:	6822      	ldr	r2, [r4, #0]
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006d0:	697b      	ldr	r3, [r7, #20]
 80006d2:	fa93 f3a3 	rbit	r3, r3
 80006d6:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006d8:	693b      	ldr	r3, [r7, #16]
 80006da:	fab3 f383 	clz	r3, r3
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	009b      	lsls	r3, r3, #2
 80006e2:	210f      	movs	r1, #15
 80006e4:	fa01 f303 	lsl.w	r3, r1, r3
 80006e8:	43db      	mvns	r3, r3
 80006ea:	401a      	ands	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	fa93 f3a3 	rbit	r3, r3
 80006f6:	61bb      	str	r3, [r7, #24]
  return result;
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	fab3 f383 	clz	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	6879      	ldr	r1, [r7, #4]
 8000704:	fa01 f303 	lsl.w	r3, r1, r3
 8000708:	4313      	orrs	r3, r2
 800070a:	6023      	str	r3, [r4, #0]
}
 800070c:	bf00      	nop
 800070e:	3720      	adds	r7, #32
 8000710:	46bd      	mov	sp, r7
 8000712:	bc90      	pop	{r4, r7}
 8000714:	4770      	bx	lr

08000716 <LL_GPIO_SetPinSpeed>:
{
 8000716:	b490      	push	{r4, r7}
 8000718:	b088      	sub	sp, #32
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	461a      	mov	r2, r3
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	0e1b      	lsrs	r3, r3, #24
 800072a:	4413      	add	r3, r2
 800072c:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 800072e:	6822      	ldr	r2, [r4, #0]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	fa93 f3a3 	rbit	r3, r3
 800073a:	613b      	str	r3, [r7, #16]
  return result;
 800073c:	693b      	ldr	r3, [r7, #16]
 800073e:	fab3 f383 	clz	r3, r3
 8000742:	b2db      	uxtb	r3, r3
 8000744:	009b      	lsls	r3, r3, #2
 8000746:	2103      	movs	r1, #3
 8000748:	fa01 f303 	lsl.w	r3, r1, r3
 800074c:	43db      	mvns	r3, r3
 800074e:	401a      	ands	r2, r3
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	fa93 f3a3 	rbit	r3, r3
 800075a:	61bb      	str	r3, [r7, #24]
  return result;
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fab3 f383 	clz	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	009b      	lsls	r3, r3, #2
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	fa01 f303 	lsl.w	r3, r1, r3
 800076c:	4313      	orrs	r3, r2
 800076e:	6023      	str	r3, [r4, #0]
}
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bc90      	pop	{r4, r7}
 8000778:	4770      	bx	lr

0800077a <LL_GPIO_SetPinOutputType>:
{
 800077a:	b490      	push	{r4, r7}
 800077c:	b088      	sub	sp, #32
 800077e:	af00      	add	r7, sp, #0
 8000780:	60f8      	str	r0, [r7, #12]
 8000782:	60b9      	str	r1, [r7, #8]
 8000784:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	461a      	mov	r2, r3
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	0e1b      	lsrs	r3, r3, #24
 800078e:	4413      	add	r3, r2
 8000790:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 8000792:	6822      	ldr	r2, [r4, #0]
 8000794:	68bb      	ldr	r3, [r7, #8]
 8000796:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	fa93 f3a3 	rbit	r3, r3
 800079e:	613b      	str	r3, [r7, #16]
  return result;
 80007a0:	693b      	ldr	r3, [r7, #16]
 80007a2:	fab3 f383 	clz	r3, r3
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	009b      	lsls	r3, r3, #2
 80007aa:	2104      	movs	r1, #4
 80007ac:	fa01 f303 	lsl.w	r3, r1, r3
 80007b0:	43db      	mvns	r3, r3
 80007b2:	401a      	ands	r2, r3
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007b8:	69fb      	ldr	r3, [r7, #28]
 80007ba:	fa93 f3a3 	rbit	r3, r3
 80007be:	61bb      	str	r3, [r7, #24]
  return result;
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fab3 f383 	clz	r3, r3
 80007c6:	b2db      	uxtb	r3, r3
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	fa01 f303 	lsl.w	r3, r1, r3
 80007d0:	4313      	orrs	r3, r2
 80007d2:	6023      	str	r3, [r4, #0]
}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc90      	pop	{r4, r7}
 80007dc:	4770      	bx	lr

080007de <LL_GPIO_SetPinPull>:
{
 80007de:	b480      	push	{r7}
 80007e0:	b087      	sub	sp, #28
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	68da      	ldr	r2, [r3, #12]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	0a1b      	lsrs	r3, r3, #8
 80007f2:	43db      	mvns	r3, r3
 80007f4:	401a      	ands	r2, r3
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	0a1b      	lsrs	r3, r3, #8
 80007fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	fa93 f3a3 	rbit	r3, r3
 8000802:	613b      	str	r3, [r7, #16]
  return result;
 8000804:	693b      	ldr	r3, [r7, #16]
 8000806:	fab3 f383 	clz	r3, r3
 800080a:	b2db      	uxtb	r3, r3
 800080c:	4619      	mov	r1, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	408b      	lsls	r3, r1
 8000812:	431a      	orrs	r2, r3
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	60da      	str	r2, [r3, #12]
}
 8000818:	bf00      	nop
 800081a:	371c      	adds	r7, #28
 800081c:	46bd      	mov	sp, r7
 800081e:	bc80      	pop	{r7}
 8000820:	4770      	bx	lr

08000822 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b088      	sub	sp, #32
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	021b      	lsls	r3, r3, #8
 8000832:	0c1b      	lsrs	r3, r3, #16
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800083a:	693b      	ldr	r3, [r7, #16]
 800083c:	fa93 f3a3 	rbit	r3, r3
 8000840:	60fb      	str	r3, [r7, #12]
  return result;
 8000842:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 8000844:	fab3 f383 	clz	r3, r3
 8000848:	b2db      	uxtb	r3, r3
 800084a:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 800084c:	e044      	b.n	80008d8 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 800084e:	2201      	movs	r2, #1
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	409a      	lsls	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	4013      	ands	r3, r2
 8000858:	2b00      	cmp	r3, #0
 800085a:	d03a      	beq.n	80008d2 <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	2b07      	cmp	r3, #7
 8000860:	d806      	bhi.n	8000870 <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 8000862:	f240 1201 	movw	r2, #257	; 0x101
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	fa02 f303 	lsl.w	r3, r2, r3
 800086c:	61bb      	str	r3, [r7, #24]
 800086e:	e008      	b.n	8000882 <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	3b08      	subs	r3, #8
 8000874:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000880:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	2b08      	cmp	r3, #8
 8000888:	d106      	bne.n	8000898 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	461a      	mov	r2, r3
 8000890:	69b9      	ldr	r1, [r7, #24]
 8000892:	6878      	ldr	r0, [r7, #4]
 8000894:	f7ff ffa3 	bl	80007de <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	461a      	mov	r2, r3
 800089e:	69b9      	ldr	r1, [r7, #24]
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff06 	bl	80006b2 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d003      	beq.n	80008b6 <LL_GPIO_Init+0x94>
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b09      	cmp	r3, #9
 80008b4:	d10d      	bne.n	80008d2 <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	461a      	mov	r2, r3
 80008bc:	69b9      	ldr	r1, [r7, #24]
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff29 	bl	8000716 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80008c4:	683b      	ldr	r3, [r7, #0]
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	461a      	mov	r2, r3
 80008ca:	69b9      	ldr	r1, [r7, #24]
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff ff54 	bl	800077a <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	3301      	adds	r3, #1
 80008d6:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80008d8:	697a      	ldr	r2, [r7, #20]
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	fa22 f303 	lsr.w	r3, r2, r3
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d1b4      	bne.n	800084e <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80008e4:	2300      	movs	r3, #0
}
 80008e6:	4618      	mov	r0, r3
 80008e8:	3720      	adds	r7, #32
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000902:	4a07      	ldr	r2, [pc, #28]	; (8000920 <LL_InitTick+0x30>)
 8000904:	3b01      	subs	r3, #1
 8000906:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <LL_InitTick+0x30>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800090e:	4b04      	ldr	r3, [pc, #16]	; (8000920 <LL_InitTick+0x30>)
 8000910:	2205      	movs	r2, #5
 8000912:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000e010 	.word	0xe000e010

08000924 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 800092c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff ffdd 	bl	80008f0 <LL_InitTick>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000940:	b480      	push	{r7}
 8000942:	b085      	sub	sp, #20
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <LL_mDelay+0x44>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800094e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000956:	d00c      	beq.n	8000972 <LL_mDelay+0x32>
  {
    Delay++;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	3301      	adds	r3, #1
 800095c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800095e:	e008      	b.n	8000972 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <LL_mDelay+0x44>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <LL_mDelay+0x32>
    {
      Delay--;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d1f3      	bne.n	8000960 <LL_mDelay+0x20>
    }
  }
}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	e000e010 	.word	0xe000e010

08000988 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <LL_SetSystemCoreClock+0x18>)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6013      	str	r3, [r2, #0]
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	20000000 	.word	0x20000000

080009a4 <__libc_init_array>:
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	2600      	movs	r6, #0
 80009a8:	4d0c      	ldr	r5, [pc, #48]	; (80009dc <__libc_init_array+0x38>)
 80009aa:	4c0d      	ldr	r4, [pc, #52]	; (80009e0 <__libc_init_array+0x3c>)
 80009ac:	1b64      	subs	r4, r4, r5
 80009ae:	10a4      	asrs	r4, r4, #2
 80009b0:	42a6      	cmp	r6, r4
 80009b2:	d109      	bne.n	80009c8 <__libc_init_array+0x24>
 80009b4:	f000 f81a 	bl	80009ec <_init>
 80009b8:	2600      	movs	r6, #0
 80009ba:	4d0a      	ldr	r5, [pc, #40]	; (80009e4 <__libc_init_array+0x40>)
 80009bc:	4c0a      	ldr	r4, [pc, #40]	; (80009e8 <__libc_init_array+0x44>)
 80009be:	1b64      	subs	r4, r4, r5
 80009c0:	10a4      	asrs	r4, r4, #2
 80009c2:	42a6      	cmp	r6, r4
 80009c4:	d105      	bne.n	80009d2 <__libc_init_array+0x2e>
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009cc:	4798      	blx	r3
 80009ce:	3601      	adds	r6, #1
 80009d0:	e7ee      	b.n	80009b0 <__libc_init_array+0xc>
 80009d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d6:	4798      	blx	r3
 80009d8:	3601      	adds	r6, #1
 80009da:	e7f2      	b.n	80009c2 <__libc_init_array+0x1e>
 80009dc:	08000a04 	.word	0x08000a04
 80009e0:	08000a04 	.word	0x08000a04
 80009e4:	08000a04 	.word	0x08000a04
 80009e8:	08000a08 	.word	0x08000a08

080009ec <_init>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	bf00      	nop
 80009f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f2:	bc08      	pop	{r3}
 80009f4:	469e      	mov	lr, r3
 80009f6:	4770      	bx	lr

080009f8 <_fini>:
 80009f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009fa:	bf00      	nop
 80009fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009fe:	bc08      	pop	{r3}
 8000a00:	469e      	mov	lr, r3
 8000a02:	4770      	bx	lr
