
RKh_LedBlink02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000009c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000b4c  08000b4c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000b4c  08000b4c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000b4c  08000b4c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b4c  08000b4c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b4c  08000b4c  00010b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b50  08000b50  00010b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000251c  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000894  00000000  00000000  00022593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000002f0  00000000  00000000  00022e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000021c  00000000  00000000  00023118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001a247  00000000  00000000  00023334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00002808  00000000  00000000  0003d57b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000939eb  00000000  00000000  0003fd83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000ac0  00000000  00000000  000d3770  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  000d4230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000b34 	.word	0x08000b34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000b34 	.word	0x08000b34

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000210:	b480      	push	{r7}
 8000212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000214:	4b04      	ldr	r3, [pc, #16]	; (8000228 <__NVIC_GetPriorityGrouping+0x18>)
 8000216:	68db      	ldr	r3, [r3, #12]
 8000218:	0a1b      	lsrs	r3, r3, #8
 800021a:	f003 0307 	and.w	r3, r3, #7
}
 800021e:	4618      	mov	r0, r3
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr
 8000228:	e000ed00 	.word	0xe000ed00

0800022c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800022c:	b480      	push	{r7}
 800022e:	b083      	sub	sp, #12
 8000230:	af00      	add	r7, sp, #0
 8000232:	4603      	mov	r3, r0
 8000234:	6039      	str	r1, [r7, #0]
 8000236:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000238:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023c:	2b00      	cmp	r3, #0
 800023e:	db0a      	blt.n	8000256 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	683b      	ldr	r3, [r7, #0]
 8000242:	b2da      	uxtb	r2, r3
 8000244:	490c      	ldr	r1, [pc, #48]	; (8000278 <__NVIC_SetPriority+0x4c>)
 8000246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800024a:	0112      	lsls	r2, r2, #4
 800024c:	b2d2      	uxtb	r2, r2
 800024e:	440b      	add	r3, r1
 8000250:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000254:	e00a      	b.n	800026c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	b2da      	uxtb	r2, r3
 800025a:	4908      	ldr	r1, [pc, #32]	; (800027c <__NVIC_SetPriority+0x50>)
 800025c:	79fb      	ldrb	r3, [r7, #7]
 800025e:	f003 030f 	and.w	r3, r3, #15
 8000262:	3b04      	subs	r3, #4
 8000264:	0112      	lsls	r2, r2, #4
 8000266:	b2d2      	uxtb	r2, r2
 8000268:	440b      	add	r3, r1
 800026a:	761a      	strb	r2, [r3, #24]
}
 800026c:	bf00      	nop
 800026e:	370c      	adds	r7, #12
 8000270:	46bd      	mov	sp, r7
 8000272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000276:	4770      	bx	lr
 8000278:	e000e100 	.word	0xe000e100
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000280:	b480      	push	{r7}
 8000282:	b089      	sub	sp, #36	; 0x24
 8000284:	af00      	add	r7, sp, #0
 8000286:	60f8      	str	r0, [r7, #12]
 8000288:	60b9      	str	r1, [r7, #8]
 800028a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800028c:	68fb      	ldr	r3, [r7, #12]
 800028e:	f003 0307 	and.w	r3, r3, #7
 8000292:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000294:	69fb      	ldr	r3, [r7, #28]
 8000296:	f1c3 0307 	rsb	r3, r3, #7
 800029a:	2b04      	cmp	r3, #4
 800029c:	bf28      	it	cs
 800029e:	2304      	movcs	r3, #4
 80002a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	3304      	adds	r3, #4
 80002a6:	2b06      	cmp	r3, #6
 80002a8:	d902      	bls.n	80002b0 <NVIC_EncodePriority+0x30>
 80002aa:	69fb      	ldr	r3, [r7, #28]
 80002ac:	3b03      	subs	r3, #3
 80002ae:	e000      	b.n	80002b2 <NVIC_EncodePriority+0x32>
 80002b0:	2300      	movs	r3, #0
 80002b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	f04f 32ff 	mov.w	r2, #4294967295
 80002b8:	69bb      	ldr	r3, [r7, #24]
 80002ba:	fa02 f303 	lsl.w	r3, r2, r3
 80002be:	43da      	mvns	r2, r3
 80002c0:	68bb      	ldr	r3, [r7, #8]
 80002c2:	401a      	ands	r2, r3
 80002c4:	697b      	ldr	r3, [r7, #20]
 80002c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002c8:	f04f 31ff 	mov.w	r1, #4294967295
 80002cc:	697b      	ldr	r3, [r7, #20]
 80002ce:	fa01 f303 	lsl.w	r3, r1, r3
 80002d2:	43d9      	mvns	r1, r3
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002d8:	4313      	orrs	r3, r2
         );
}
 80002da:	4618      	mov	r0, r3
 80002dc:	3724      	adds	r7, #36	; 0x24
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
	...

080002e8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002ec:	4b05      	ldr	r3, [pc, #20]	; (8000304 <LL_RCC_HSI_Enable+0x1c>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	4a04      	ldr	r2, [pc, #16]	; (8000304 <LL_RCC_HSI_Enable+0x1c>)
 80002f2:	f043 0301 	orr.w	r3, r3, #1
 80002f6:	6013      	str	r3, [r2, #0]
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	40023800 	.word	0x40023800

08000308 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000308:	b480      	push	{r7}
 800030a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800030c:	4b06      	ldr	r3, [pc, #24]	; (8000328 <LL_RCC_HSI_IsReady+0x20>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f003 0302 	and.w	r3, r3, #2
 8000314:	2b02      	cmp	r3, #2
 8000316:	bf0c      	ite	eq
 8000318:	2301      	moveq	r3, #1
 800031a:	2300      	movne	r3, #0
 800031c:	b2db      	uxtb	r3, r3
}
 800031e:	4618      	mov	r0, r3
 8000320:	46bd      	mov	sp, r7
 8000322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000326:	4770      	bx	lr
 8000328:	40023800 	.word	0x40023800

0800032c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 31
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800032c:	b480      	push	{r7}
 800032e:	b083      	sub	sp, #12
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000334:	4b07      	ldr	r3, [pc, #28]	; (8000354 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	00db      	lsls	r3, r3, #3
 8000340:	4904      	ldr	r1, [pc, #16]	; (8000354 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000342:	4313      	orrs	r3, r2
 8000344:	600b      	str	r3, [r1, #0]
}
 8000346:	bf00      	nop
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40023800 	.word	0x40023800

08000358 <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000360:	4b06      	ldr	r3, [pc, #24]	; (800037c <LL_RCC_SetSysClkSource+0x24>)
 8000362:	689b      	ldr	r3, [r3, #8]
 8000364:	f023 0203 	bic.w	r2, r3, #3
 8000368:	4904      	ldr	r1, [pc, #16]	; (800037c <LL_RCC_SetSysClkSource+0x24>)
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	4313      	orrs	r3, r2
 800036e:	608b      	str	r3, [r1, #8]
}
 8000370:	bf00      	nop
 8000372:	370c      	adds	r7, #12
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	40023800 	.word	0x40023800

08000380 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000384:	4b04      	ldr	r3, [pc, #16]	; (8000398 <LL_RCC_GetSysClkSource+0x18>)
 8000386:	689b      	ldr	r3, [r3, #8]
 8000388:	f003 030c 	and.w	r3, r3, #12
}
 800038c:	4618      	mov	r0, r3
 800038e:	46bd      	mov	sp, r7
 8000390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000394:	4770      	bx	lr
 8000396:	bf00      	nop
 8000398:	40023800 	.word	0x40023800

0800039c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80003a6:	689b      	ldr	r3, [r3, #8]
 80003a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80003ac:	4904      	ldr	r1, [pc, #16]	; (80003c0 <LL_RCC_SetAHBPrescaler+0x24>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	4313      	orrs	r3, r2
 80003b2:	608b      	str	r3, [r1, #8]
}
 80003b4:	bf00      	nop
 80003b6:	370c      	adds	r7, #12
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	40023800 	.word	0x40023800

080003c4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003cc:	4b06      	ldr	r3, [pc, #24]	; (80003e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003ce:	689b      	ldr	r3, [r3, #8]
 80003d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80003d4:	4904      	ldr	r1, [pc, #16]	; (80003e8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4313      	orrs	r3, r2
 80003da:	608b      	str	r3, [r1, #8]
}
 80003dc:	bf00      	nop
 80003de:	370c      	adds	r7, #12
 80003e0:	46bd      	mov	sp, r7
 80003e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e6:	4770      	bx	lr
 80003e8:	40023800 	.word	0x40023800

080003ec <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80003fc:	4904      	ldr	r1, [pc, #16]	; (8000410 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4313      	orrs	r3, r2
 8000402:	608b      	str	r3, [r1, #8]
}
 8000404:	bf00      	nop
 8000406:	370c      	adds	r7, #12
 8000408:	46bd      	mov	sp, r7
 800040a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040e:	4770      	bx	lr
 8000410:	40023800 	.word	0x40023800

08000414 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000414:	b480      	push	{r7}
 8000416:	b085      	sub	sp, #20
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800041c:	4b08      	ldr	r3, [pc, #32]	; (8000440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800041e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000420:	4907      	ldr	r1, [pc, #28]	; (8000440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4313      	orrs	r3, r2
 8000426:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800042a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4013      	ands	r3, r2
 8000430:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000432:	68fb      	ldr	r3, [r7, #12]
}
 8000434:	bf00      	nop
 8000436:	3714      	adds	r7, #20
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40023800 	.word	0x40023800

08000444 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000444:	b480      	push	{r7}
 8000446:	b085      	sub	sp, #20
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800044c:	4b08      	ldr	r3, [pc, #32]	; (8000470 <LL_APB1_GRP1_EnableClock+0x2c>)
 800044e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000450:	4907      	ldr	r1, [pc, #28]	; (8000470 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4313      	orrs	r3, r2
 8000456:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000458:	4b05      	ldr	r3, [pc, #20]	; (8000470 <LL_APB1_GRP1_EnableClock+0x2c>)
 800045a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4013      	ands	r3, r2
 8000460:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000462:	68fb      	ldr	r3, [r7, #12]
}
 8000464:	bf00      	nop
 8000466:	3714      	adds	r7, #20
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	40023800 	.word	0x40023800

08000474 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000474:	b480      	push	{r7}
 8000476:	b085      	sub	sp, #20
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800047c:	4b08      	ldr	r3, [pc, #32]	; (80004a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800047e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000480:	4907      	ldr	r1, [pc, #28]	; (80004a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4313      	orrs	r3, r2
 8000486:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <LL_APB2_GRP1_EnableClock+0x2c>)
 800048a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	4013      	ands	r3, r2
 8000490:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000492:	68fb      	ldr	r3, [r7, #12]
}
 8000494:	bf00      	nop
 8000496:	3714      	adds	r7, #20
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40023800 	.word	0x40023800

080004a4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <LL_FLASH_SetLatency+0x24>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f023 0207 	bic.w	r2, r3, #7
 80004b4:	4904      	ldr	r1, [pc, #16]	; (80004c8 <LL_FLASH_SetLatency+0x24>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	600b      	str	r3, [r1, #0]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	40023c00 	.word	0x40023c00

080004cc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <LL_FLASH_GetLatency+0x18>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f003 0307 	and.w	r3, r3, #7
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40023c00 	.word	0x40023c00

080004e8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <LL_PWR_SetRegulVoltageScaling+0x24>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80004f8:	4904      	ldr	r1, [pc, #16]	; (800050c <LL_PWR_SetRegulVoltageScaling+0x24>)
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	4313      	orrs	r3, r2
 80004fe:	600b      	str	r3, [r1, #0]
}
 8000500:	bf00      	nop
 8000502:	370c      	adds	r7, #12
 8000504:	46bd      	mov	sp, r7
 8000506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050a:	4770      	bx	lr
 800050c:	40007000 	.word	0x40007000

08000510 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000510:	b480      	push	{r7}
 8000512:	b083      	sub	sp, #12
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
 8000518:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800051a:	683b      	ldr	r3, [r7, #0]
 800051c:	041a      	lsls	r2, r3, #16
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	619a      	str	r2, [r3, #24]
}
 8000522:	bf00      	nop
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800052e:	b480      	push	{r7}
 8000530:	b085      	sub	sp, #20
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
 8000536:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	695b      	ldr	r3, [r3, #20]
 800053c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 800053e:	68fa      	ldr	r2, [r7, #12]
 8000540:	683b      	ldr	r3, [r7, #0]
 8000542:	4013      	ands	r3, r2
 8000544:	041a      	lsls	r2, r3, #16
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	43d9      	mvns	r1, r3
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	400b      	ands	r3, r1
 800054e:	431a      	orrs	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	619a      	str	r2, [r3, #24]
}
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000564:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000568:	f7ff ff84 	bl	8000474 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800056c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000570:	f7ff ff68 	bl	8000444 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000574:	2003      	movs	r0, #3
 8000576:	f7ff fe27 	bl	80001c8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800057a:	f7ff fe49 	bl	8000210 <__NVIC_GetPriorityGrouping>
 800057e:	4603      	mov	r3, r0
 8000580:	2200      	movs	r2, #0
 8000582:	210f      	movs	r1, #15
 8000584:	4618      	mov	r0, r3
 8000586:	f7ff fe7b 	bl	8000280 <NVIC_EncodePriority>
 800058a:	4603      	mov	r3, r0
 800058c:	4619      	mov	r1, r3
 800058e:	f04f 30ff 	mov.w	r0, #4294967295
 8000592:	f7ff fe4b 	bl	800022c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000596:	f000 f80d 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800059a:	f000 f841 	bl	8000620 <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 800059e:	2101      	movs	r1, #1
 80005a0:	4803      	ldr	r0, [pc, #12]	; (80005b0 <main+0x50>)
 80005a2:	f7ff ffc4 	bl	800052e <LL_GPIO_TogglePin>
	  LL_mDelay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f000 fa69 	bl	8000a80 <LL_mDelay>
	  LL_GPIO_TogglePin(GPIOC, LL_GPIO_PIN_0);
 80005ae:	e7f6      	b.n	800059e <main+0x3e>
 80005b0:	40020800 	.word	0x40020800

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ff73 	bl	80004a4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 80005be:	bf00      	nop
 80005c0:	f7ff ff84 	bl	80004cc <LL_FLASH_GetLatency>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1fa      	bne.n	80005c0 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80005ca:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80005ce:	f7ff ff8b 	bl	80004e8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_SetCalibTrimming(16);
 80005d2:	2010      	movs	r0, #16
 80005d4:	f7ff feaa 	bl	800032c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_Enable();
 80005d8:	f7ff fe86 	bl	80002e8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80005dc:	bf00      	nop
 80005de:	f7ff fe93 	bl	8000308 <LL_RCC_HSI_IsReady>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d1fa      	bne.n	80005de <SystemClock_Config+0x2a>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80005e8:	2000      	movs	r0, #0
 80005ea:	f7ff fed7 	bl	800039c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f7ff fee8 	bl	80003c4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff fef9 	bl	80003ec <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80005fa:	2000      	movs	r0, #0
 80005fc:	f7ff feac 	bl	8000358 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000600:	bf00      	nop
 8000602:	f7ff febd 	bl	8000380 <LL_RCC_GetSysClkSource>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d1fa      	bne.n	8000602 <SystemClock_Config+0x4e>
  {

  }
  LL_Init1msTick(16000000);
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <SystemClock_Config+0x68>)
 800060e:	f000 fa29 	bl	8000a64 <LL_Init1msTick>
  LL_SetSystemCoreClock(16000000);
 8000612:	4802      	ldr	r0, [pc, #8]	; (800061c <SystemClock_Config+0x68>)
 8000614:	f000 fa5a 	bl	8000acc <LL_SetSystemCoreClock>
}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	00f42400 	.word	0x00f42400

08000620 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000626:	463b      	mov	r3, r7
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
 8000634:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000636:	2004      	movs	r0, #4
 8000638:	f7ff feec 	bl	8000414 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 800063c:	2101      	movs	r1, #1
 800063e:	480b      	ldr	r0, [pc, #44]	; (800066c <MX_GPIO_Init+0x4c>)
 8000640:	f7ff ff66 	bl	8000510 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000644:	2301      	movs	r3, #1
 8000646:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000648:	2301      	movs	r3, #1
 800064a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000654:	2300      	movs	r3, #0
 8000656:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <MX_GPIO_Init+0x4c>)
 800065e:	f000 f973 	bl	8000948 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000662:	bf00      	nop
 8000664:	3718      	adds	r7, #24
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40020800 	.word	0x40020800

08000670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000674:	e7fe      	b.n	8000674 <NMI_Handler+0x4>

08000676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000676:	b480      	push	{r7}
 8000678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800067a:	e7fe      	b.n	800067a <HardFault_Handler+0x4>

0800067c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000680:	e7fe      	b.n	8000680 <MemManage_Handler+0x4>

08000682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000686:	e7fe      	b.n	8000686 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	e7fe      	b.n	800068c <UsageFault_Handler+0x4>

0800068e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000692:	bf00      	nop
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr

080006aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006ae:	bf00      	nop
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr

080006b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
	...

080006c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <SystemInit+0x20>)
 80006ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006d2:	4a05      	ldr	r2, [pc, #20]	; (80006e8 <SystemInit+0x20>)
 80006d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006dc:	bf00      	nop
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000724 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006f0:	480d      	ldr	r0, [pc, #52]	; (8000728 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006f2:	490e      	ldr	r1, [pc, #56]	; (800072c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006f4:	4a0e      	ldr	r2, [pc, #56]	; (8000730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a0b      	ldr	r2, [pc, #44]	; (8000734 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000708:	4c0b      	ldr	r4, [pc, #44]	; (8000738 <LoopFillZerobss+0x26>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000716:	f7ff ffd7 	bl	80006c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800071a:	f000 f9e7 	bl	8000aec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800071e:	f7ff ff1f 	bl	8000560 <main>
  bx  lr    
 8000722:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000724:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000728:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800072c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000730:	08000b54 	.word	0x08000b54
  ldr r2, =_sbss
 8000734:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000738:	20000020 	.word	0x20000020

0800073c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800073c:	e7fe      	b.n	800073c <ADC_IRQHandler>

0800073e <LL_GPIO_SetPinMode>:
{
 800073e:	b480      	push	{r7}
 8000740:	b089      	sub	sp, #36	; 0x24
 8000742:	af00      	add	r7, sp, #0
 8000744:	60f8      	str	r0, [r7, #12]
 8000746:	60b9      	str	r1, [r7, #8]
 8000748:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	fa93 f3a3 	rbit	r3, r3
 8000758:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800075a:	693b      	ldr	r3, [r7, #16]
 800075c:	fab3 f383 	clz	r3, r3
 8000760:	b2db      	uxtb	r3, r3
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	2103      	movs	r1, #3
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	401a      	ands	r2, r3
 800076e:	68bb      	ldr	r3, [r7, #8]
 8000770:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000772:	69fb      	ldr	r3, [r7, #28]
 8000774:	fa93 f3a3 	rbit	r3, r3
 8000778:	61bb      	str	r3, [r7, #24]
  return result;
 800077a:	69bb      	ldr	r3, [r7, #24]
 800077c:	fab3 f383 	clz	r3, r3
 8000780:	b2db      	uxtb	r3, r3
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	6879      	ldr	r1, [r7, #4]
 8000786:	fa01 f303 	lsl.w	r3, r1, r3
 800078a:	431a      	orrs	r2, r3
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	601a      	str	r2, [r3, #0]
}
 8000790:	bf00      	nop
 8000792:	3724      	adds	r7, #36	; 0x24
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <LL_GPIO_SetPinOutputType>:
{
 800079c:	b480      	push	{r7}
 800079e:	b085      	sub	sp, #20
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	43db      	mvns	r3, r3
 80007b0:	401a      	ands	r2, r3
 80007b2:	68bb      	ldr	r3, [r7, #8]
 80007b4:	6879      	ldr	r1, [r7, #4]
 80007b6:	fb01 f303 	mul.w	r3, r1, r3
 80007ba:	431a      	orrs	r2, r3
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	605a      	str	r2, [r3, #4]
}
 80007c0:	bf00      	nop
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <LL_GPIO_SetPinSpeed>:
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	; 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	689a      	ldr	r2, [r3, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
 80007de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	fa93 f3a3 	rbit	r3, r3
 80007e6:	613b      	str	r3, [r7, #16]
  return result;
 80007e8:	693b      	ldr	r3, [r7, #16]
 80007ea:	fab3 f383 	clz	r3, r3
 80007ee:	b2db      	uxtb	r3, r3
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	2103      	movs	r1, #3
 80007f4:	fa01 f303 	lsl.w	r3, r1, r3
 80007f8:	43db      	mvns	r3, r3
 80007fa:	401a      	ands	r2, r3
 80007fc:	68bb      	ldr	r3, [r7, #8]
 80007fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	fa93 f3a3 	rbit	r3, r3
 8000806:	61bb      	str	r3, [r7, #24]
  return result;
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fab3 f383 	clz	r3, r3
 800080e:	b2db      	uxtb	r3, r3
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	6879      	ldr	r1, [r7, #4]
 8000814:	fa01 f303 	lsl.w	r3, r1, r3
 8000818:	431a      	orrs	r2, r3
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	609a      	str	r2, [r3, #8]
}
 800081e:	bf00      	nop
 8000820:	3724      	adds	r7, #36	; 0x24
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr

0800082a <LL_GPIO_SetPinPull>:
{
 800082a:	b480      	push	{r7}
 800082c:	b089      	sub	sp, #36	; 0x24
 800082e:	af00      	add	r7, sp, #0
 8000830:	60f8      	str	r0, [r7, #12]
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	68da      	ldr	r2, [r3, #12]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800083e:	697b      	ldr	r3, [r7, #20]
 8000840:	fa93 f3a3 	rbit	r3, r3
 8000844:	613b      	str	r3, [r7, #16]
  return result;
 8000846:	693b      	ldr	r3, [r7, #16]
 8000848:	fab3 f383 	clz	r3, r3
 800084c:	b2db      	uxtb	r3, r3
 800084e:	005b      	lsls	r3, r3, #1
 8000850:	2103      	movs	r1, #3
 8000852:	fa01 f303 	lsl.w	r3, r1, r3
 8000856:	43db      	mvns	r3, r3
 8000858:	401a      	ands	r2, r3
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	fa93 f3a3 	rbit	r3, r3
 8000864:	61bb      	str	r3, [r7, #24]
  return result;
 8000866:	69bb      	ldr	r3, [r7, #24]
 8000868:	fab3 f383 	clz	r3, r3
 800086c:	b2db      	uxtb	r3, r3
 800086e:	005b      	lsls	r3, r3, #1
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	431a      	orrs	r2, r3
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	60da      	str	r2, [r3, #12]
}
 800087c:	bf00      	nop
 800087e:	3724      	adds	r7, #36	; 0x24
 8000880:	46bd      	mov	sp, r7
 8000882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000886:	4770      	bx	lr

08000888 <LL_GPIO_SetAFPin_0_7>:
{
 8000888:	b480      	push	{r7}
 800088a:	b089      	sub	sp, #36	; 0x24
 800088c:	af00      	add	r7, sp, #0
 800088e:	60f8      	str	r0, [r7, #12]
 8000890:	60b9      	str	r1, [r7, #8]
 8000892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	6a1a      	ldr	r2, [r3, #32]
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	fa93 f3a3 	rbit	r3, r3
 80008a2:	613b      	str	r3, [r7, #16]
  return result;
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	fab3 f383 	clz	r3, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	210f      	movs	r1, #15
 80008b0:	fa01 f303 	lsl.w	r3, r1, r3
 80008b4:	43db      	mvns	r3, r3
 80008b6:	401a      	ands	r2, r3
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008bc:	69fb      	ldr	r3, [r7, #28]
 80008be:	fa93 f3a3 	rbit	r3, r3
 80008c2:	61bb      	str	r3, [r7, #24]
  return result;
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	fab3 f383 	clz	r3, r3
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	6879      	ldr	r1, [r7, #4]
 80008d0:	fa01 f303 	lsl.w	r3, r1, r3
 80008d4:	431a      	orrs	r2, r3
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	621a      	str	r2, [r3, #32]
}
 80008da:	bf00      	nop
 80008dc:	3724      	adds	r7, #36	; 0x24
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr

080008e6 <LL_GPIO_SetAFPin_8_15>:
{
 80008e6:	b480      	push	{r7}
 80008e8:	b089      	sub	sp, #36	; 0x24
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	60b9      	str	r1, [r7, #8]
 80008f0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008f6:	68bb      	ldr	r3, [r7, #8]
 80008f8:	0a1b      	lsrs	r3, r3, #8
 80008fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008fc:	697b      	ldr	r3, [r7, #20]
 80008fe:	fa93 f3a3 	rbit	r3, r3
 8000902:	613b      	str	r3, [r7, #16]
  return result;
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	fab3 f383 	clz	r3, r3
 800090a:	b2db      	uxtb	r3, r3
 800090c:	009b      	lsls	r3, r3, #2
 800090e:	210f      	movs	r1, #15
 8000910:	fa01 f303 	lsl.w	r3, r1, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	401a      	ands	r2, r3
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	0a1b      	lsrs	r3, r3, #8
 800091c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	fa93 f3a3 	rbit	r3, r3
 8000924:	61bb      	str	r3, [r7, #24]
  return result;
 8000926:	69bb      	ldr	r3, [r7, #24]
 8000928:	fab3 f383 	clz	r3, r3
 800092c:	b2db      	uxtb	r3, r3
 800092e:	009b      	lsls	r3, r3, #2
 8000930:	6879      	ldr	r1, [r7, #4]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	431a      	orrs	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800093c:	bf00      	nop
 800093e:	3724      	adds	r7, #36	; 0x24
 8000940:	46bd      	mov	sp, r7
 8000942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000946:	4770      	bx	lr

08000948 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
 8000950:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8000952:	2300      	movs	r3, #0
 8000954:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000960:	697b      	ldr	r3, [r7, #20]
 8000962:	fa93 f3a3 	rbit	r3, r3
 8000966:	613b      	str	r3, [r7, #16]
  return result;
 8000968:	693b      	ldr	r3, [r7, #16]
 800096a:	fab3 f383 	clz	r3, r3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000972:	e050      	b.n	8000a16 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2101      	movs	r1, #1
 800097a:	69fb      	ldr	r3, [r7, #28]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	4013      	ands	r3, r2
 8000982:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8000984:	69bb      	ldr	r3, [r7, #24]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d042      	beq.n	8000a10 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	2b01      	cmp	r3, #1
 8000990:	d003      	beq.n	800099a <LL_GPIO_Init+0x52>
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	685b      	ldr	r3, [r3, #4]
 8000996:	2b02      	cmp	r3, #2
 8000998:	d10d      	bne.n	80009b6 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	689b      	ldr	r3, [r3, #8]
 800099e:	461a      	mov	r2, r3
 80009a0:	69b9      	ldr	r1, [r7, #24]
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f7ff ff12 	bl	80007cc <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	461a      	mov	r2, r3
 80009ae:	69b9      	ldr	r1, [r7, #24]
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f7ff fef3 	bl	800079c <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	691b      	ldr	r3, [r3, #16]
 80009ba:	461a      	mov	r2, r3
 80009bc:	69b9      	ldr	r1, [r7, #24]
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ff33 	bl	800082a <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d11a      	bne.n	8000a02 <LL_GPIO_Init+0xba>
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	fa93 f3a3 	rbit	r3, r3
 80009d6:	60bb      	str	r3, [r7, #8]
  return result;
 80009d8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80009da:	fab3 f383 	clz	r3, r3
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	2b07      	cmp	r3, #7
 80009e2:	d807      	bhi.n	80009f4 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	461a      	mov	r2, r3
 80009ea:	69b9      	ldr	r1, [r7, #24]
 80009ec:	6878      	ldr	r0, [r7, #4]
 80009ee:	f7ff ff4b 	bl	8000888 <LL_GPIO_SetAFPin_0_7>
 80009f2:	e006      	b.n	8000a02 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	461a      	mov	r2, r3
 80009fa:	69b9      	ldr	r1, [r7, #24]
 80009fc:	6878      	ldr	r0, [r7, #4]
 80009fe:	f7ff ff72 	bl	80008e6 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	461a      	mov	r2, r3
 8000a08:	69b9      	ldr	r1, [r7, #24]
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff fe97 	bl	800073e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8000a10:	69fb      	ldr	r3, [r7, #28]
 8000a12:	3301      	adds	r3, #1
 8000a14:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	69fb      	ldr	r3, [r7, #28]
 8000a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d1a7      	bne.n	8000974 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8000a24:	2300      	movs	r3, #0
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3720      	adds	r7, #32
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
	...

08000a30 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b083      	sub	sp, #12
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4a07      	ldr	r2, [pc, #28]	; (8000a60 <LL_InitTick+0x30>)
 8000a44:	3b01      	subs	r3, #1
 8000a46:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000a48:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <LL_InitTick+0x30>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a4e:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <LL_InitTick+0x30>)
 8000a50:	2205      	movs	r2, #5
 8000a52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000a6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f7ff ffdd 	bl	8000a30 <LL_InitTick>
}
 8000a76:	bf00      	nop
 8000a78:	3708      	adds	r7, #8
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
	...

08000a80 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b085      	sub	sp, #20
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <LL_mDelay+0x48>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000a8e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a96:	d00c      	beq.n	8000ab2 <LL_mDelay+0x32>
  {
    Delay++;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000a9e:	e008      	b.n	8000ab2 <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <LL_mDelay+0x48>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <LL_mDelay+0x32>
    {
      Delay--;
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d1f3      	bne.n	8000aa0 <LL_mDelay+0x20>
    }
  }
}
 8000ab8:	bf00      	nop
 8000aba:	bf00      	nop
 8000abc:	3714      	adds	r7, #20
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e010 	.word	0xe000e010

08000acc <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000ad4:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <LL_SetSystemCoreClock+0x1c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000000 	.word	0x20000000

08000aec <__libc_init_array>:
 8000aec:	b570      	push	{r4, r5, r6, lr}
 8000aee:	4d0d      	ldr	r5, [pc, #52]	; (8000b24 <__libc_init_array+0x38>)
 8000af0:	4c0d      	ldr	r4, [pc, #52]	; (8000b28 <__libc_init_array+0x3c>)
 8000af2:	1b64      	subs	r4, r4, r5
 8000af4:	10a4      	asrs	r4, r4, #2
 8000af6:	2600      	movs	r6, #0
 8000af8:	42a6      	cmp	r6, r4
 8000afa:	d109      	bne.n	8000b10 <__libc_init_array+0x24>
 8000afc:	4d0b      	ldr	r5, [pc, #44]	; (8000b2c <__libc_init_array+0x40>)
 8000afe:	4c0c      	ldr	r4, [pc, #48]	; (8000b30 <__libc_init_array+0x44>)
 8000b00:	f000 f818 	bl	8000b34 <_init>
 8000b04:	1b64      	subs	r4, r4, r5
 8000b06:	10a4      	asrs	r4, r4, #2
 8000b08:	2600      	movs	r6, #0
 8000b0a:	42a6      	cmp	r6, r4
 8000b0c:	d105      	bne.n	8000b1a <__libc_init_array+0x2e>
 8000b0e:	bd70      	pop	{r4, r5, r6, pc}
 8000b10:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b14:	4798      	blx	r3
 8000b16:	3601      	adds	r6, #1
 8000b18:	e7ee      	b.n	8000af8 <__libc_init_array+0xc>
 8000b1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b1e:	4798      	blx	r3
 8000b20:	3601      	adds	r6, #1
 8000b22:	e7f2      	b.n	8000b0a <__libc_init_array+0x1e>
 8000b24:	08000b4c 	.word	0x08000b4c
 8000b28:	08000b4c 	.word	0x08000b4c
 8000b2c:	08000b4c 	.word	0x08000b4c
 8000b30:	08000b50 	.word	0x08000b50

08000b34 <_init>:
 8000b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b36:	bf00      	nop
 8000b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b3a:	bc08      	pop	{r3}
 8000b3c:	469e      	mov	lr, r3
 8000b3e:	4770      	bx	lr

08000b40 <_fini>:
 8000b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b42:	bf00      	nop
 8000b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b46:	bc08      	pop	{r3}
 8000b48:	469e      	mov	lr, r3
 8000b4a:	4770      	bx	lr
